Minishell
├── OBJECTIVES
│	├──Core Concepts
│	[...]
│	
├──	Understanding key concepts
│	├──	Shell
│	├──	Built-in commands
│	├──	External commands 
│	├──	File Manipulation
│	├──	System Utilities
│	├──	Networking Commands
│	├──	Compilation & Execution
│	├──	Operators and special features
│	└──	Allowed external functions 
│		
├──	ENVIRONMENTAL VARIABLES ( ENVIRON())
│
├──	SIGNALS (signal_handler_notes)
│	├──	Ctrl+D (EOF - End Of File)
│	├──	Ctrl+C (SIGINT).
│	├──	Ctrl+\ (SIGQUIT)
│	├──	Special Case: Child Process & Signals
│	└──	Signals Handling Task Checklist 
│
├── BUILTIN COMMANDS
│	├──	echo
│	├──	
│	├──	
│	└──	
================================================================================================
🎯 Objectives
============

🧠 Core Concepts
-------------------
1. Process Management
Use system calls like fork(), execve(), and waitpid() to manage child processes and execute commands.
2. File Descriptors
Work with low-level file I/O, including redirection and piping, using open(), dup2(), and pipe().
3. Signals
Properly handle SIGINT, SIGQUIT, and EOF (Ctrl+C, Ctrl+\ and Ctrl+D).
4. Memory Management
Ensure all dynamically allocated memory is freed — no memory leaks allowed.
5. Read and parse input
Handle command-line inputs, split them into arguments and process quotes and special characters correctly. 
6. Execute commands
Run external programs (like /bin/ls or /bin/cat) and implement built-in commands like cd, echo, export, etc. 
7. Manage environment variables
Store, modify and expand $VARIABLES
8. Implement redirections (<, >, >>)
Redirect input/output correctly.
9. Implement pipes
Allow chaining of commands.
10. Manage process control
Execute commands using fork( ), execve( ), waitpid( ), etc. 
Managing child processes, exit codes, and signals properly.
11. Handling edge cases


🖥️ User Interface
-------------------
Display a working prompt in interactive mode.

Maintain command history (via readline and add_history).

🧩 Parsing
---------------
Read user input and parse commands correctly, including:

Quotes: Single '' and double "" quotes with correct behavior.

Variables: Expand $VARIABLE, handle $? for last exit status.

Tokenization: Split command line into tokens, manage syntax rules.

⚙️ Execution
--------------
Search and execute external commands using execve(), with proper path resolution (via PATH).

Handle absolute and relative paths.

Execute built-in commands directly without execve().

🧱 Built-in Commands
--------------------
Implement these builtins with their specific constraints:

        echo [-n]

        cd [path]

        pwd

        export

        unset

        env

        exit

📂 Redirections
--------------------
< : Redirect input.

> : Redirect output (overwrite).

>> : Redirect output (append).

<< : Here-document, read input until a defined delimiter.

🧵 Pipes
--------------------
Implement | to allow command chaining, where the output of one command becomes the input of the next.

📡 Signals
--------------------
In interactive mode:

        Ctrl+C (SIGINT): Print a new prompt.

        Ctrl+D (EOF): Exit the shell.

        Ctrl+\ (SIGQUIT): Do nothing.

Only one global variable (to store signal number) is allowed and must not expose structures or data.

🚫 Constraints
--------------------
Must use only allowed functions 

Must not have any memory leaks, segmentation faults, or undefined behavior.

Must not interpret characters like [\] or [;].


💡 Understanding key concepts 
==================================

📕 Shell
----------

📌 A shell is a command-line interface (CLI) program that allows users to interact with the operating system by entering commands. It acts as an intermediary between the user and the operating system, interpreting the commands the user inputs and passing them to the system for execution. Essentially, it provides a way for users to control the computer`s functions and run programs.

📌 Key features:
1️⃣ Command Interpretation: The shell takes the commands entered by the user, interprets them, and runs the corresponding program or system function.
2️⃣ Job Control: Shells allow users to run processes in the background, foreground, or as part of a pipeline, making multitasking easier. You can suspend a command, run it in the background, or bring it back to the foreground.
3️⃣ Input/Output Redirection: The shell can redirect the standard input, output, and error of commands. For example:
    🔹 Input Redirection: command < file.txt takes input from a file.
    🔹 Output Redirection: command > file.txt sends the output to a file.
    🔹 Append Output: command >> file.txt appends the output to a file.
4️⃣ Pipes: The shell supports pipes, which allow the output of one command to be passed as input to another. For example, command1 | command2 sends the output of command1 to command2.
5️⃣ Environment Variables: Shells support environment variables, which store system-wide or user-specific settings (e.g., PATH, HOME).
6️⃣ Scripting: Shells allow users to write scripts (a series of commands saved in a file) to automate tasks. For example, a shell script can perform backups, manage files, or deploy applications.
7️⃣ Built-in Commands: Most shells provide a set of built-in commands (like cd, echo, exit) that are part of the shell program itself and don`t require external programs.

📌 Interaction with the Operating System
The shell runs commands that interact with the operating system’s kernel. When you type a command, the shell might invoke system calls (like fork(), exec(), open()) to create processes, execute programs, and handle file operations.
The shell often provides feedback to the user, including the results of commands or any error messages.


📗 Built-in commands
----------------------
These commands should be executed inside minishell, without calling execve( ). 
🔸 echo
    Prints arguments to the terminal.
    Supports the -n flag (prevent a newline).
    Example:
    echo Hello World  # Output: Hello World\n
    echo -n Hello     # Output: Hello
🔸	cd
Changes the current working directory.
    Should handle:
        - absolute paths (cd /home/user).
        - relative paths (cd ../folder).
        - no argument (cd  = should go to $HOME).
        - cd - should switch to the previous directory. 
    Example:
        cd /usr/bin
        cd ..
        cd -  # Switch back
🔸 pwd
    Prints the current working directory.
    Example:
        pwd  # Output: /home/user
🔸 export
    Adds or modifies an environment variable. 
    Without arguments, it prints all exported variables. 
    Example:
        export VAR=value
        export PATH="/usr/local/bin:$PATH"
🔸 unset
    Removes an environment variable. 
    Example:
        unset VAR
🔸 env
    Prints all environment variables. 
    Example:
        env
🔸 exit
    Exits the shell.
    Supports an optional exit code (exit 42).
    Example:
        exit 0

External commands 
----------------------
Minishell should search for the binary in $PATH and execute it using execve().
Basic Commands (Available in /bin/)
ls – List files and directories.
cat – Print file contents.
grep – Search for text in a file.
head – Show first few lines of a file.
tail – Show last few lines of a file.
wc – Count words, lines, and bytes in a file.
cp – Copy files.
mv – Move or rename files.
rm – Remove files.
mkdir – Create a new directory.
rmdir – Remove empty directories.

File Manipulation
----------------------
touch – Create an empty file.
chmod – Change file permissions.
chown – Change file ownership.

System Utilities
----------------------
whoami – Display the current user.
uname – Show system information.
hostname – Show the system hostname.
clear – Clear the terminal screen.

Networking Commands
----------------------
ping – Check network connectivity.
curl – Fetch data from a URL.
wget – Download files from the web.

Compilation & Execution
----------------------
gcc – Compile C programs.
make – Run Makefile commands.
./a.out – Execute a compiled program.


Operators and special features
----------------------------------
Minishell should correctly handle:
	- Redirections
	- Input Redirection (<) – Read input from a file instead of stdin.
			- Example: cat < file.txt
	- Output Redirection (>) – Write output to a file (overwrite).
			- Example: ls > output.txt
	- Append Redirection (>>) – Append output to a file.
			- Example: echo "hello" >> output.txt
	- Pipes (|)
			- Connect multiple commands together.
			- Example: ls | grep .c | wc -l
	- Environment Variable Expansion ($VAR)
			- Replace $VAR with its value in commands.(expansion)
			- Example: echo $HOME  # Output: /home/user
	- Signal Handling
		- Ctrl+C – Interrupts the current command but does not exit the shell.
		- Ctrl+D – Exits the shell (EOF).
		- Ctrl+\ – Should be ignored. (it interrupts the "child" process)

Allowed external functions 
---------------------------> ACTUALIZAR 

readline, rl_clear_history, rl_on_new_line,
rl_replace_line, rl_redisplay, add_history,
printf, malloc, free, 
write, access, open, read,

close, fork, wait, waitpid, wait3, wait4, signal,
sigaction, sigemptyset, sigaddset, kill, exit,

getcwd, chdir, stat, lstat, fstat, unlink, execve,
dup, dup2, pipe, opendir, readdir, closedir,

strerror, perror,

isatty, ttyname, ttyslot, ioctl,

getenv, tcsetattr, tcgetattr, tgetent, tgetflag,
tgetnum, tgetstr, tgoto, tputs


Allowed external functions

Readline library functions
readline: reads a line from standard input with editing capabilities.
Syntax: char *readline(const char *prompt);
Example:  char *input = readline(“minishell> “);
rl_clear_history: clears the history of readline inputs.
Syntax: void rl_clear_history(void);
Example: rl_clear_history();
rl_on_new_line: prepares readline for a new line.
Syntax: void rl_on_nw_line(void);
Example: rl_on_new_line();
rl_replace_line: replaces the current input line in readline.
Syntax: void rl_replace_line(const char *text, int clear_undo);
Example: rl_replace_line(“new text”, 0);
rl_replace_line: replaces the current input line in readline.
Syntax: void rl_replace_line(const char *text, int clear_undo);
Example: rl_replace_line(“new text”, 0);
rl_redisplay: redisplays the readline prompt with current input. 
Syntax: void rl_redisplay(void);
Example: rl_redisplay();
add_history: adds a command to readline history. 
Syntax: void add_history(const char *line);
Example: add_history(input);

Standard library functions
printf: Prints formatted output to stdout.
Syntax: printf(const char *format, ...)
Example: printf("Hello %s, you are %d years old.\n", "Alice", 25);
write: Writes data from a buffer to a file descriptor. 
Syntax: ssize_t write(int fd, const void *buf, size_t count);
Example: write(STDOUT_FILENO, "Hello", 5);
malloc: Allocates a block of memory on the heap. 
Syntax: void *malloc(size_t size);
Example: int *arr = malloc(10 * sizeof(int));
free: Frees memory allocated with malloc. 
Syntax: void free(void *ptr);
Example: free(arr);

File handling functions
access: checks file accessibility.
Syntax: int access(const char *pathname, int mode);
Example: if (access("file.txt", F_OK) == 0) { /* File exists */ }
open: opens or creates a file. 
Syntax: int open(const char *pathname, int flags, mode_t mode);
Example: int fd = open("file.txt", O_RDONLY);
read: reads data from a file descriptor. 
Syntax: ssize_t read(int fd, void *buf, size_t count);
Example: read(fd, buffer, 100);
close: closes a file descriptor.
Syntax: int close(int fd);
Example: close(fd);

Process management
fork: creates a new process.
Syntax: pid_t fork(void);
Example: pid_t pid = fork();
wait: waits for a child process to terminate.
Syntax: pid_t wait(int *status);
Example: wait(NULL);
waitpid: waits for a specific child process.
Syntax: pid_t waitpid(pid_t pid, int *status, int options);
Example: waitpid(pid, NULL, 0);
wait3: waits for a child process with resource usage info. 
Syntax: pid_t wait3(int *status, int options, struct rusage *rusage);
Example: wait3(NULL, 0, NULL);
wait4: waits for a child process with more control.
Syntax: pid_t wait4(pid_t pid, int *status, int options, struct rusage *rusage);
Example: wait4(pid, NULL, 0, NULL);

Signal handling
signal: sets a signal handler.
Syntax: void (*signal(int signum, void(handler)(int)))(int);
Example: signal(SIGINT, handler_function);
sigaction: configures signal handling.
Syntax: int signation(int signum, const struct sigaction *act, struct sigaction *oldact);
Example: sigaction(SIGINT, &sa, NULL);
sigemptyset: initializes an empty signal set.
Syntax: int sigemptyset(sigset_t *set);
Example: sigemptyset(&set);
sigaddset: adds a signal to a signal set. 
Syntax: int sigaddset(sigset_t *set, int signum);
Example: sigaddset(&set, SIGINT);
kill: sends a signal to a process.
Syntax: int kill(pid_t pid, int sig);
Example: kill(pid, SIGKILL);

System & directory functions
exit: terminate a process.
Syntax: void exit(int status);
Example: exit(0);
getcwd: gets the current working directory.
Syntax: char *getcwd(char *buf, size_t size);
Example: getcwd(buffer, sizeof(buffer));
chdir: changes the current directory.
Syntax: int chdir(const char *path);
Example: chdir(“/home/user”);
stat: retrieves file information.
Syntax: int stat(const char *pathname, struct stat *buf);
Example: stat(“file.txt”, &st);
lstat: retrieves file information, including symbolic links.
Syntax: int lstat(const char *pathname, struct stat *buf);
Example: lstat(“symlink”, &st);
fstat: retrieves file information from a file descriptor.
Syntax: int fstat(int fd, struct stat *buf);
Example: fstat(fd, &st);
unlink: deletes a file.
Syntax: int unlink(const char *pathname);
Example: unlink(“file.txt”);

Execution & I/O redirection
execve: executes a program.
Syntax: int execve(const char *pathname, char *const argv[], char *const envp[]);
Example: execve(“/bin/ls”, args, env);
dup: duplicates a file descriptor.
Syntax: int dup(int oldfd);
Example: int newfd = dup(fd);
dup2: duplicates a file descriptor to a specific number.
Syntax: int dup2(int oldfd, int newfd);
Example: dup2(fd, STDOUT_FILENO);
pipe: creates a pipe for interprocess communication.
Syntax: int pipe(int pipefd[2]);
Example: pipe(pipefd);

Directory handling
opendir: opens a directory.
Syntax: DIR *opendir(const char *name);
Example: DIR *dir = opendir(“.”);
readdir: reads directory entries.
Syntax: struct dirent *readdir(DIR *dirp);
Example: readdir(dir);
closedir: closes a directory.
Syntax: int closedir(DIR *dirp);
Example: closedir(dir);

Terminal control and capabilities
strerror: returns a string describing an error number.
Syntax: char *strerror(int errnum);
Example: printf(“%s\n”, strerror(errno));
perror: prints an error message.
Syntax: void perror (const char *s);
Example: perror(“Error opening file”);
isatty: checks if a file descriptor is a terminal.
Syntax: int isatty(int fd);
Example: isatty(STDIN_FILENO);
ttyname: returns the name of the terminal.
Syntax: char *ttyname(int fd);
Example: ttyname(STDIN_FILENO);
ioctl: manipulates device parameters.
Syntax: int ioctl(int fd, unsigned long request, …);
Example: ioctl(fd, TDGETS,&termios_p);
getenv: retrieves an environment variable.
Syntax: char *getenv(const char *name);
Example: getenv(“PATH”);
tcsetattr: set the terminal attributes.
Syntax: int tcsetattr(int fd, int optional_actions, const struct termios *termios_p);
Example: tcsetattr(STDIN_FILENO, TCSANOW, &term);
tcgetattr: gets the current terminal attributes.
Syntax: int tcgetattr(int fd, struct termios *termios_p);
Example: struct termios term;
tcgetattr(STDIN_FILENO, &term);
tgetent: loads the terminal entry from the termcap database.
Syntax: int tgetent(char *bp, const char *name);
Example: char buffer[2048];
tgetent(buffer, getenv(“TERM”));
tgetflag: gets a boolean capability from the termcap database.
Syntax: int tgetflag(const char *id);
Example: tgetflag(“bs”);
tgetnum: gets a numeric capability from the termcap database. 
Syntax: int tgetnum(const char *id);
Example: int columns = tgetnum(“co”); //Get number of columns
tgetstr: gets a string capability from the termcap database.
Syntax: char *tgetstr(const char *id, char **area);
Example: char *clear = tgetstr(“cl”, &area); //Get clear screen command
tgoto: generates cursor movement.
Syntax: char *tgoto(const char *cap, int col, int row);
Example: char *move = tgoto(tgetstr(“cl”, NULL), 10, 5);//Move to (10, 5)
tputs: outputs a termcap string with padding.
Syntax: int tputs(const char *str, int affcnt, int(*putc)(int));
Example: tputs(tgetstr(“cl”, NULL), 1, putchar);  //Clear screen 



===================================================================================
===================================================================================



 📑 Bibliography & Usefull links
==============================================

🔹https://www.gnu.org/software/bash/manual/bash.html
🔹https://www.cs.purdue.edu/homes/grr/SystemsProgrammingBook/Book/Chapter5-WritingYourOwnShell.pdf
🔹https://github.com/gleal42/42_Minishell/tree/master
🔹

SIGNALS
🔹https://man7.org/linux/man-pages/man2/signal.2.html
🔹https://man7.org/linux/man-pages/man7/signal.7.html
🔹


📢📕📗📘📙→🚨🔍⚠💡🎮 🎉 🔰🏁🚩🛟🔶🔷🔴🟠🟢🟣🟡🔵⇶🙊 🍝🧠🐢 🛠️🔧💭💀
1️⃣2️⃣3️⃣4️⃣5️⃣6️⃣7️⃣8️⃣9️⃣🔟✅.🚫❗⭐ 😴😵🍴🤔 🗑📥🚀🔥🎯 ❌ 🔹🔸🔺🔻📌🧪🧵📚📖📑


---

📢📕📗📘📙→🚨🔍⚠💡🎮 🎉 🔰🏁🚩🛟🔶🔷🔴🟠🟢🟣🟡🔵⇶🙊 🍝🧠🐢 🛠️🔧💭💀🔊📡 
1️⃣2️⃣3️⃣4️⃣5️⃣6️⃣7️⃣8️⃣9️⃣🔟.🚫❗⭐ 😴😵🍴🤔 📦 🗑📥🚀🔥🎯 ❌⭕ 🔹🔸🔺🔻📌🧪🧵🧩❔❓⛔❎✅

pendientes: 

🚩🚩🚩🚩🚩for signals:

Let me know when you're ready to:

Add signal forwarding for pipelines
Block signals during heredoc
Or integrate with your global state (like g_exit_status) in a Norm-compliant way.

--------------------

Git useful commands
Clone repo	
git clone <repo_name>
Check status
git status
Create a branch
git checkout -b <branch_name>
Push to remote
git push -u origin <branch_name>
Change branch 
git checkout <branch_name>
Commit changes	
git add <file_name>
git commit -m "Msg with changes"
Merge into main	
git checkout main
git merge <branch_name>
Delete branch after merging	
git push origin --delete <branch_name>

---
Work_flow with branches
1. Switch to branch:
git checkout <my_branch>
2. Fetch the latest changes from main:
git fetch origin
3. Rebase my branch onto the latest main:
git rebase origin/main
This reapplies the branch’s commits on top of the latest main. If there are conflicts, Git will pause and ask to resolve them.
4. Resolve conflicts (if needed):
Edit the files to fix conflicts.
5. Stage the resolved files:
git add <file>
6. Continue the rebase:
git rebase --continue
7. Push the rebased branch (if already pushed before):
git push --force origin my-feature

