BRIEF EXPLANATION REGADING
===========================

🔁 Forks

🔗 Pipes

⚙️ Builtin handling

📥 Redirection (placeholder for now)


🧠 Foundational Concepts
**************************

🔁 fork()
---------
🔺Creates a child process that is an almost-exact copy of the parent, but after the fork, the parent and child can run independently.
🔺Returns:
	🔹0 in the child
	🔹The child's pid in the parent
	🔹-1 if it fails

💻 execve()
---------
🔺 A system call in Unix/Linux that replaces the current process with a new program.
It does not create a new process; it only changes the current process's behavior.
🔺 Must be used only in the child, otherwise you kill your shell.

💡Process Image: it's all the information the operating system uses to manage and execute a process, including code, data, open files, and environment variables.


🔗 Pipes (pipe(fd[2]))
---------------------------
🔺 Allows one process to write to fd[1] and another to read from fd[0]
🔺 Used to link commands like:
		> ls | grep hello → ls writes to pipe → grep reads from it

🔍 How pipes work?
Pipes are used to connect the output of one command to the input of another. 
They enable powerful data processing by chaining multiple commands together. 
🔸 Command output redirection: when we execute a command, it usually sends its output (called standard output or stdout) to the terminal screen. When we use a pipe, this output is redirected as input (standard input or stdin) to another command. 
🔸 Chaining commands: Pipes allow us to connect commands in a sequence, where the output of the first command becomes the input for the next command. 
🔸 Syntax:
		> cmd1 | cmd2 | cmd3
command 1: produces some output.
command 2: processes the output of command 1.
command 3: processes the output of command 2, and so on. 
🔸 File descriptors: under the hood, pipes use file descriptors. 
stdout of command 1 (file descriptor 1) is connected to the stdin of command 2 (file descriptor 0). That is to say, each pipe has two ends, the read end and the write end.
🔸 Process creation: Each command in the pipeline runs a separate process. The shell creates a pipe (temporary buffer in memory) to connect these processes.


💆 Using Minishell to understand this workflow
************************************************

🧱 File: exec_pipes.c

✅ execute_pipeline()
Called when there’s a command like:
		> echo hi | grep h | cat

Steps:
******
1️⃣ Count the number of pipes (You need N - 1 pipes for N commands.)
2️⃣ Create all pipes:

		pipefd[0], pipefd[1], ...
		
So for ls | grep txt | wc -l, we have:
		Pipe 1 → between ls and grep
		Pipe 2 → between grep and wc
		
Each pipe is a pipefd[2]:
		pipes[0][0] = read end of pipe 1
		pipes[0][1] = write end of pipe 1

		pipes[1][0] = read end of pipe 2
		pipes[1][1] = write end of pipe 2

3️⃣ Loop over each command
🔹 Split command into args
🔹 Call fork_pipes()

				[ PARENT SHELL ]
				  |
				  |-- fork() --> [ CHILD 1: ls ]
				  |                stdout → pipes[0][1]
				  |
				  |-- fork() --> [ CHILD 2: grep txt ]
				  |                stdin  ← pipes[0][0]
				  |                stdout → pipes[1][1]
				  |
				  |-- fork() --> [ CHILD 3: wc -l ]
						           stdin  ← pipes[1][0]
						           
						           
[ ls ] --------writes-----> [ grep txt ] --------writes------> [ wc -l ]
           pipe[0] (fd=1)                     pipe[1] (fd=1)
                    ^                                    ^
                    |                                    |
               stdin ← pipe[0] (fd=0)              stdin ← pipe[1] (fd=0)						       
						           

✅ fork_pipes()

		pid = fork();
		if (pid == 0)
		{
			// In child
			// Set up input/output redirection based on i (pipe index)
			dup2(...);
			close_pipes();
			execute_command(args[0], args, env);
			exit(0);
		}
		

Each child:
🔸 Inherits all pipes
🔸 Sets up its own input/output using dup2()
🔸 Calls execute_command() (next part)

🛠️ What each child does (dup2() logic)
	Child 1 (ls)
		dup2(pipe[0][1], STDOUT_FILENO); // write to pipe
		close unused fds

	Child 2 (grep txt)
		dup2(pipe[0][0], STDIN_FILENO);  // read from pipe 1
		dup2(pipe[1][1], STDOUT_FILENO); // write to pipe 2
		close unused fds

	Child 3 (wc -l)
		dup2(pipe[1][0], STDIN_FILENO);  // read from pipe 2
		close unused fds


🔍 What does dup2(old_fd, new_fd) do?
--------------------------------------

int dup2(int old_fd, int new_fd);

It duplicates a file descriptor: makes [new_fd] now refer to the same thing as [old_fd]
If new_fd already exists, it is closed first.
It returns new_fd, or -1 on error

💡 Why it's useful:
You can redirect input/output like this:

dup2(pipe_read_fd, STDIN_FILENO);  // Make stdin read from a pipe
dup2(pipe_write_fd, STDOUT_FILENO); // Make stdout write to a pipe

📦 When applied to your fork_pipes()
You have a struct t_pipe with:
		pipes->pipefd[i][0] = read end of pipe i
		pipes->pipefd[i][1] = write end of pipe i

You're in a loop that runs once per command in a pipeline.
Let’s break down the logic:

✅ Case: First command (i == 0)
		dup2(pipes->pipefd[0][1], STDOUT_FILENO);

You're saying:
“Instead of writing to the terminal (stdout), write into pipe 0.”

So:
		ls | grep → ls writes into the pipe

✅ Case: Last command (i == pipes->pipe_count)

		dup2(pipes->pipefd[i - 1][0], STDIN_FILENO);

You're saying:
	“Instead of reading from the terminal (stdin), read from pipe i-1.”

So:
		grep txt | wc -l → wc -l reads from the previous pipe

✅ Case: Middle command
		
		dup2(pipes->pipefd[i - 1][0], STDIN_FILENO);
		dup2(pipes->pipefd[i][1], STDOUT_FILENO);

You're saying:
		“Read from the previous pipe, write to the next pipe.”

So:
		ls | grep txt | wc -l → grep txt connects input/output to two different pipes.

🧼 After dup2(): Close unused fds
Always close all pipes in the child after setting up redirection — otherwise they stay open and block the flow.
That’s why you call "close_pipes(pipes);" right after the dup2() calls.


=================================================================================
						           
/*
** execute_external_command - Forks and runs an external (non-builtin) program.
**
** @param cmd   The command name (e.g., "ls", "grep", or "./script.sh").
** @param args  Argument array including cmd itself (e.g., {"ls", "-la", NULL}).
** @param env   Pointer to the t_env environment linked list.
**
** This function:
** - Resolves the command’s executable path via check_command_path().
** - Converts the linked list `env` into a `char **envp` array for execve().
** - Forks a child process using fork_and_execute().
** - Waits for the child and updates the shell's exit status.
** - Cleans up all allocated memory.
**
** Only used for non-builtin commands like:
**    ls, grep, cat, pwd, etc.
**
** If `cmd_path` resolution fails or environment conversion fails, an error is printed and the function returns.
*/

1. Path Resolution
cmd_path = check_command_path(cmd);
If the command is /bin/ls, ./myscript, or ls, this function tries to find the full path.
It may return:
- cmd itself (if it's already a full path)
- A dynamically allocated string (e.g. /bin/ls)
- NULL → if not found (in that case, the function prints an error)


3. Fork and Execute
pid = fork_and_execute(cmd_path, args, envp);
You call a helper that does:
		if (pid == 0) {
			setup_signals_child();
			execve(cmd_path, args, envp);
		}
The child process runs the external program.
The parent continues after the call.


[⭕] que hace la funcion fork() ???????


4. Wait for Child
r
waitpid(pid, &status, 0);
Parent waits for child process to finish.

5. Update Exit Status
handle_exit_status(status, env);
You analyze the status:

WIFEXITED() → store WEXITSTATUS()

WIFSIGNALED() → store 128 + signal number (like Bash)


6. Memory Cleanup


📕📗📘📙→📢🚨🔍🧱⚠💡🎮 🎉 🔰🏁🚩🛟🔑🚪🔌🧮🚦⚡💣
🔶🔷🔴🟠🟢🟣🟡🔵⇶🙊 🍝🧠🐢 🛠️🔧💭💬💀🔊📡  🖨️💻🎓
1️⃣2️⃣3️⃣4️⃣5️⃣6️⃣7️⃣8️⃣9️⃣🔟.🚫❗⭐ 😴😵🍴🤔✋📦 🗑📥🚀🔥🎯 
❌⭕ 🔹🔸🔺🔻📌🧪🧵🧩❔❓⛔✅❎‼️🔚🔁🔗⚙️ 👾👻💆

🧱 File: exec_commands.c
✅ execute_command()

if (is_builtin)
	execute_builtin();
else
	execute_external_command();
Builtins like echo → handled specially

All other commands like ls → go to execute_external_command()

✅ execute_external_command()
Resolve path (e.g. /bin/ls)

Convert env list → char **envp

Call fork_and_execute()

✅ fork_and_execute()

pid = fork();
if (pid == 0)
{
	setup_signals_child();     // 🔥 Add this here!
	execve(cmd_path, args, envp);
}


🔧 File: exec_builtins.c
Builtins are split into two categories:

Builtin	Forked?
cd, exit, export, unset	❌ Run in parent
echo, env, pwd	✅ Run in child
So:

execute_builtin() detects and delegates

execute_child_builtin() does the fork() + exit(...)

execute_parent_builtin() runs directly

✅ Each child builtin is wrapped in a fork() and exit()
✅ Parent builtins modify shell state and avoid fork()



✅ Where to Add setup_signals_child()
You should add it:

In fork_and_execute() → ✅ YES

In execute_child_builtin() → ✅ YES

if (pid == 0)
{
	setup_signals_child(); // <- ADD THIS
	...
}
This way, all child processes handle SIGINT and SIGQUIT correctly like Bash.

🔚 TL;DR — Your Shell Execution Flow

main()
  ↓
execute_pipeline()
  ↳ fork_pipes()
      ↳ fork()
          ↳ dup2() pipe ends
          ↳ execute_command()
              ↳ execute_builtin() or execute_external_command()
                  ↳ fork_and_execute() or fork/exec builtin
                  
✅ Action Items for You
Task	Do It?
Add setup_signals_child() in fork_and_execute()	✅
Add setup_signals_child() in execute_child_builtin()	✅
Understand dup2 pipe logic in fork_pipes()	✅ (see i logic)
Understand builtins and their fork rules	✅

