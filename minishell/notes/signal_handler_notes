└──	SIGNALS (signal_handler_notes)
	├──	Ctrl+D (EOF - End Of File)
	├──	Ctrl+C (SIGINT).
	├──	Ctrl+\ (SIGQUIT)
	├──	Special Case: Child Process & Signals
	└──	Signals Handling Task Checklist 

📡 SIGNALS 
------------

📌 Signals: Notifications sent to a process to notify it of events like interrupts (e.g., SIGINT, SIGQUIT).
📌 Signal Handlers: Custom functions defined to handle these signals using signal() or sigaction().

✅ Signals You Must Handle (per subject)

Signal		Trigger 	Key	Behavior in Bash				Required Behavior
***********************************************************************************
SIGINT		Ctrl+C		Stops current command, new prompt	Display new prompt on a new line (without exiting the shell).
SIGQUIT		Ctrl+\		Quits with core dump				Do nothing (AFFECTS CHILD PROCESS(?))
EOF			Ctrl+D		Ends input (exit shell)				Exit shell if input is empty.Let you exit cleanly if Ctrl+D is pressed (detected via readline() returning NULL).

+--------------------------+
|        START SHELL       |
+--------------------------+
             |
             v
+--------------------------+
| Setup Signal Handlers    | <--- set SIGINT, SIGQUIT
+--------------------------+
             |
             v
+--------------------------+
| Display Prompt (readline)|
+--------------------------+
             ├──────────────────────────────────────────────────────────────────────
             v									|									|
+--------------------------+		+--------------------------+		+--------------------------+
| User Input Detected?     |		|    SIGINT received  	   |		|  SIGQUIT received 	   |
| (NULL == Ctrl+D)         |		|     (Ctrl+C)             |		|  (   Ctrl+\ )            |
+----------+---------------+		+----------+---------------+		+----------+---------------+
           | YES							   | YES								| YES
           v								   v									v
 +------------------------+			+--------------------------+			+------------------------+	
 |     Exit Shell         |			| Clear current input line |				   Do nothing ????
 +------------------------+			| rl_replace_line("", 0);  |
           | NO						| rl_on_new_line();        |
           v						| rl_redisplay();          |
+---------------------------+		+--------------------------+
| Parse and Execute Command |
+---------------------------+
           |
           v
+---------------------------+
| Back to Prompt (loop)     |
+---------------------------+

📦 Implementation Tips
🔸Use sigaction() instead of signal() for more reliable behavior.
🔸Don’t call non-safe functions like printf() inside the signal handler—stick to write() or set a flag.
🔸For SIGINT, you’ll need to interact with readline`s internal buffer to refresh the prompt.


🔊 Ctrl+D (EOF - End Of File)
---------------------------------
What it is: Not a signal, but an ASCII character that signifies "no more input" when readline() receives an empty string.
Behavior in Bash: When pressed on an empty line, it exits the shell.
How to handle it:

    You detect it when readline() returns NULL.

    You don’t need a signal handler for this.

Example:

        input = readline(PROMPT);
        if (!input)
        {
            printf("exit\n");
            exit(0);
        }


🔊 Ctrl+C (SIGINT)
-----------------
What it is: A signal (SIGINT) sent to the process when Ctrl+C is pressed.
Default behavior: Terminates the program.
Required behavior in Minishell:
🔹 In interactive mode (waiting for input): Just show a new prompt on a new line.
🔹 In child processes (e.g., cat, sleep): Should terminate the child, but not the shell itself.

🧠 How to achieve this:
→ Use sigaction() to intercept SIGINT and customize behavior.
→ In the handler, you call these readline-specific functions:

rl_replace_line("", 0);  // Clear current typed line
rl_on_new_line();        // Makes readline handle the linebreak: move to a new line
write(1, "\n", 1);       // Print newline
rl_redisplay();          // Show the prompt again

You must only do this in the parent, while waiting for input.

🔊 Ctrl+\ (SIGQUIT)
-------------------------
What it is: A signal (SIGQUIT) sent when Ctrl+\ is pressed.
Default behavior: Terminates the program and prints: Quit: 3.
Required behavior in Minishell:
🔸 In the shell prompt: Do nothing.
🔸 In child processes: Should behave normally (e.g., print Quit: 3 if terminated).

🧠 How to achieve this:
→ In parent shell: set SIGQUIT to SIG_IGN.
→ In child processes: restore SIGQUIT to its default behavior using SIG_DFL.

🚨 Special Case: Child Process & Signals
-------------------------------------------
Imagine the user runs:

>$ sleep 5 | sleep 4

Now the shell spawns 2 processes. If the user presses Ctrl+\:
❗ By default, the signal only hits the first process.
❗ The second one keeps running unless you manually forward the signal.

📌 The trick:
When forking, keep track of how many commands were piped.
If the signal isn’t handled automatically, use kill(0, SIGQUIT); inside the child to forward it to the remaining processes.

🧠 Bonus Explanation: kill()
kill(pid, signal) sends a signal to a process.
kill(0, SIGINT) sends SIGINT to all processes in the current process group (usually child + shell).
This lets you simulate the user pressing Ctrl+\ or Ctrl+C programmatically.

-----------------------------------------------------------

🧩 **Signals Handling Task Checklist for Minishell**

🧩 **GENERAL SETUP**

- [X] Create a `signal_handler.c` file.
- [X] Define custom handlers for `SIGINT` and `SIGQUIT`.
- [X] Use `sigaction()` to assign handlers in `main()` or shell loop.

- [🚫 ]Avoid using `signal()` unless testing — `sigaction()` is more reliable. 🚨 See Ctrl+\ section
- [❓] Use **only one global variable** (e.g., `volatile sig_atomic_t g_signal_flag`) to store signal state, as per Minishell subject rules.

🧩 **IN THE SHELL (INTERACTIVE MODE — i.e., waiting for input with `readline()`)**

✅ ▶️ **On Ctrl+C (SIGINT)**
- [X] Prevent shell from exiting.
- [X] Clear current input buffer using `rl_replace_line("", 0);`
- [X] Move to new line: `rl_on_new_line();`
- [X] Print newline manually: `write(1, "\n", 1);`
- [X] Redisplay the prompt: `rl_redisplay();`

✅ ▶️ **On Ctrl+\ (SIGQUIT)**
- [X] Do **nothing** — no output, no quit, just ignore it.
- [🚫] Set `SIGQUIT` to `SIG_IGN` using `sigaction()`. 
//🚨 sigaction to handle sigquit was change to signal, because of wrong behaviour (it printed ^\ on screen instead of doing nothing). It is commented in signal_handler() in case it is needed in the future

🧩 **IN CHILD PROCESSES (executing external commands like `cat`, `sleep`)**

❔ ▶️ **On Ctrl+C (SIGINT)**
- [ ] Allow default behavior (child gets terminated).
- [ ] Shell must not quit.

❔ ▶️ **On Ctrl+\ (SIGQUIT)**
- [ ] Allow default behavior.
- [ ] If the child was killed by SIGQUIT, shell should print:  
  `"Quit: 3\n"`.

❔ 🧼 **AFTER EXECUTION / IN PARENT (WAITING FOR CHILDREN)**

- [ ] Use `waitpid()` or `wait()` and check child’s `status`.
- [ ] If child exited due to `SIGINT`, print **newline** (`\n`) only.
- [ ] If child exited due to `SIGQUIT`, print `"Quit: 3\n"`.

if (WIFSIGNALED(status))
{
	int sig = WTERMSIG(status);
	if (sig == SIGINT)
		write(1, "\n", 1);
	else if (sig == SIGQUIT)
		write(1, "Quit: 3\n", 8);
}

🧩 **ON EOF (Ctrl+D)**

- [X] Detect this by checking if `readline()` returns `NULL`.
- [X] If `NULL`, print `exit\n` and exit cleanly:
//code is in main()

### 🧪 **OPTIONAL (Advanced but Useful)**

- [ ] Use `kill(0, signal)` to forward signals to all children (useful with pipelines).
- [ ] Optionally block signals during heredoc or critical sections.