└──	SIGNALS (signal_handler_notes)
	├──	Ctrl+D (EOF - End Of File)
	├──	Ctrl+C (SIGINT).
	├──	Ctrl+\ (SIGQUIT)
	├──	Special Case: Child Process & Signals
	└──	Signals Handling Task Checklist 

📡 SIGNALS 
------------

📌 Signals: Notifications sent to a process to notify it of events like interrupts (e.g., SIGINT, SIGQUIT).
📌 Signal Handlers: Custom functions defined to handle these signals using signal() or sigaction().

✅ Signals You Must Handle (per subject)

Signal		Trigger 	Key	Behavior in Bash				Required Behavior
***********************************************************************************
SIGINT		Ctrl+C		Stops current command, new prompt	Display new prompt on a new line (without exiting the shell).
SIGQUIT		Ctrl+\		Quits with core dump				Do nothing (AFFECTS CHILD PROCESS(?))
EOF			Ctrl+D		Ends input (exit shell)				Exit shell if input is empty.Let you exit cleanly if Ctrl+D is pressed (detected via readline() returning NULL).

+--------------------------+
|        START SHELL       |
+--------------------------+
             |
             v
+--------------------------+
| Setup Signal Handlers    | <--- set SIGINT, SIGQUIT
+--------------------------+
             |
             v
+--------------------------+
| Display Prompt (readline)|
+--------------------------+
             ├──────────────────────────────────────────────────────────────────────
             v									|									|
+--------------------------+		+--------------------------+		+--------------------------+
| User Input Detected?     |		|    SIGINT received  	   |		|  SIGQUIT received 	   |
| (NULL == Ctrl+D)         |		|     (Ctrl+C)             |		|  (   Ctrl+\ )            |
+----------+---------------+		+----------+---------------+		+----------+---------------+
           | YES							   | YES								| YES
           v								   v									v
 +------------------------+			+--------------------------+			+------------------------+	
 |     Exit Shell         |			| Clear current input line |				   Do nothing ????
 +------------------------+			| rl_replace_line("", 0);  |
           | NO						| rl_on_new_line();        |
           v						| rl_redisplay();          |
+---------------------------+		+--------------------------+
| Parse and Execute Command |
+---------------------------+
           |
           v
+---------------------------+
| Back to Prompt (loop)     |
+---------------------------+

📦 Implementation Tips
🔸Use sigaction() instead of signal() for more reliable behavior.
🔸Don’t call non-safe functions like printf() inside the signal handler—stick to write() or set a flag.
🔸For SIGINT, you’ll need to interact with readline`s internal buffer to refresh the prompt.


🔊 Ctrl+D (EOF - End Of File)
---------------------------------
What it is: Not a signal, but an ASCII character that signifies "no more input" when readline() receives an empty string.
Behavior in Bash: When pressed on an empty line, it exits the shell.
How to handle it:

    You detect it when readline() returns NULL.

    You don’t need a signal handler for this.

Example:

        input = readline(PROMPT);
        if (!input)
        {
            printf("exit\n");
            exit(0);
        }


🔊 Ctrl+C (SIGINT)
-----------------
What it is: A signal (SIGINT) sent to the process when Ctrl+C is pressed.
Default behavior: Terminates the program.
Required behavior in Minishell:
🔹 In interactive mode (waiting for input): Just show a new prompt on a new line.
🔹 In child processes (e.g., cat, sleep): Should terminate the child, but not the shell itself.

🧠 How to achieve this:
→ Use sigaction() to intercept SIGINT and customize behavior.
→ In the handler, you call these readline-specific functions:

rl_replace_line("", 0);  // Clear current typed line
rl_on_new_line();        // Makes readline handle the linebreak: move to a new line
write(1, "\n", 1);       // Print newline
rl_redisplay();          // Show the prompt again

You must only do this in the parent, while waiting for input.

🔊 Ctrl+\ (SIGQUIT)
-------------------------
What it is: A signal (SIGQUIT) sent when Ctrl+\ is pressed.
Default behavior: Terminates the program and prints: Quit: 3.
Required behavior in Minishell:
🔸 In the shell prompt: Do nothing.
🔸 In child processes: Should behave normally (e.g., print Quit: 3 if terminated).

🧠 How to achieve this:
→ In parent shell: set SIGQUIT to SIG_IGN.
→ In child processes: restore SIGQUIT to its default behavior using SIG_DFL.

🚨 Special Case: Child Process & Signals
-------------------------------------------
Imagine the user runs:

>$ sleep 5 | sleep 4

Now the shell spawns 2 processes. If the user presses Ctrl+\:
❗ By default, the signal only hits the first process.
❗ The second one keeps running unless you manually forward the signal.

📌 The trick:
When forking, keep track of how many commands were piped.
If the signal isn’t handled automatically, use kill(0, SIGQUIT); inside the child to forward it to the remaining processes.

🧠 Bonus Explanation: kill()
kill(pid, signal) sends a signal to a process.
kill(0, SIGINT) sends SIGINT to all processes in the current process group (usually child + shell).
This lets you simulate the user pressing Ctrl+\ or Ctrl+C programmatically.

-----------------------------------------------------------

🧩 **Signals Handling Task Checklist for Minishell**

🧩 **GENERAL SETUP**

- [X] Create a `signal_handler.c` file.
- [X] Define custom handlers for `SIGINT` and `SIGQUIT`.
- [X] Use `sigaction()` to assign handlers in `main()` or shell loop.

- [🚫 ]Avoid using `signal()` unless testing — `sigaction()` is more reliable. 🚨 See Ctrl+\ section
- [✅] Use **only one global variable** (e.g., `volatile sig_atomic_t g_signal_flag`) to store signal state, as per Minishell subject rules.

🧩 **IN THE SHELL (INTERACTIVE MODE — i.e., waiting for input with `readline()`)**

✅ ▶️ **On Ctrl+C (SIGINT)**
- [X] Prevent shell from exiting.
- [X] Clear current input buffer using `rl_replace_line("", 0);`
- [X] Move to new line: `rl_on_new_line();`
- [X] Print newline manually: `write(1, "\n", 1);`
- [X] Redisplay the prompt: `rl_redisplay();`

✅ ▶️ **On Ctrl+\ (SIGQUIT)**
- [X] Do **nothing** — no output, no quit, just ignore it.

🧩 **IN CHILD PROCESSES (executing external commands like `cat`, `sleep`)**

❔ ▶️ **On Ctrl+C (SIGINT)**
- [ ] Allow default behavior (child gets terminated).
- [ ] Shell must not quit.

❔ ▶️ **On Ctrl+\ (SIGQUIT)**
- [ ] Allow default behavior.
- [ ] If the child was killed by SIGQUIT, shell should print:  
  `"Quit: 3\n"`.

❔ 🧼 **AFTER EXECUTION / IN PARENT (WAITING FOR CHILDREN)**

- [ ] Use `waitpid()` or `wait()` and check child’s `status`.
- [ ] If child exited due to `SIGINT`, print **newline** (`\n`) only.
- [ ] If child exited due to `SIGQUIT`, print `"Quit: 3\n"`.

if (WIFSIGNALED(status))
{
	int sig = WTERMSIG(status);
	if (sig == SIGINT)
		write(1, "\n", 1);
	else if (sig == SIGQUIT)
		write(1, "Quit: 3\n", 8);
}

🧩 **ON EOF (Ctrl+D)**

- [X] Detect this by checking if `readline()` returns `NULL`.
- [X] If `NULL`, print `exit\n` and exit cleanly:
//code is in main()

### 🧪 **OPTIONAL (Advanced but Useful)**

- [ ] Use `kill(0, signal)` to forward signals to all children (useful with pipelines).
- [ ] Optionally block signals during heredoc or critical sections.

==============================================================


=.=.=.=.=.=.=.=.=.=.=.=.=.=.=
= SIGNAL HANDLING & COMANDS =
=.=.=.=.=.=.=.=.=.=.=.=.=.=.=

**what’s needed to make your builtins interact properly with signals?**

### Interruptibility:
- All builtins must respond correctly to `Ctrl+C` (SIGINT) in `interactive mode`.
- `env` or `exit` (when forking) must restore default signal handlers in the child process.

 🔌 Connect Signals with Builtin Execution
-------------------------------------------

🧩 In the parent process, use: 
> setup_signals_interactive(); 
[✅] doing this in main()

🧩 In child processes (forked):
In your executor, anywhere you fork(), you need to do:
		if (pid == 0) // child
		{
			setup_signals_child();
			// execute builtin or external command
		}
This allows:
- cat, sleep, etc., to be interruptible (Ctrl+C)
- SIGQUIT to show Quit: 3 like Bash
[❔] add a call to setup_signals_child() in the forked child

🧩 Special Case: builtin_exit and SIGINT
If the user presses Ctrl+C before typing exit, your current setup handles that correctly — input is cleared.
But if exit is called from a pipeline, you must ensure the child process doesn’t accidentally quit the whole shell. 
So, in builtin_exit():
🔺 Only call quit_program() when not forked.
🔺 If is_forked == 1, just exit(env->exit_status).
[ ] check the track method --> "is_forked" is correctly implemented?
[ ] esta puesto "1" a la fuerza, no hay call de la funcion alternativo que tenga 0 

🧩  In exec_commands.c → After waitpid()
When you`re waiting on child processes (including builtins run in a fork), you should add this after waitpid():
if (WIFSIGNALED(status))
		{
			if (WTERMSIG(status) == SIGINT)
				write(1, "\n", 1);
			else if (WTERMSIG(status) == SIGQUIT)
				write(1, "Quit: 3\n", 8);
		}
[ ] it is in the code but uncomment and use it in the final exec_external_command() or exec_builtins().

🔚 Final Checklist for Signal-Ready Builtins
-------------------------------------------
Task												Done?
setup_signals_interactive() in main shell			[ ]
setup_signals_child() in forked child				[ ] 🟡 Add call in child process
builtin_exit() checks is_forked before exiting		[ ] 
Parent checks WIFSIGNALED(status) after waitpid()	[ ] 🟡 To be used
SIGQUIT is ignored in main shell					[ ]	✅
Ctrl+C clears prompt input (via rl_* functions)		[ ] ✅


---------------------------------------------------------------------------------------
************************************************************
* 🤔🚨 Should Ctrl+C terminate the "inner" minishell? 🤔🚨 *
************************************************************

Whether Ctrl+C (SIGINT) should terminate the "inner" minishell depends on when and what it’s doing:

🧠 Behavior in Bash / POSIX Shells
Context in Shell				Ctrl+C Behavior						Should inner shell terminate?
---------------------------------------------------------------------------------------------------
Waiting for user input			Interrupts input, redraws prompt	❌ No
Running a child process			Sends SIGINT to child process		❌ Shell survives
Running a blocking command		Interrupts the command				❌ Shell survives
Typing ./minishell manually		Starts a subshell					❌ Ctrl+C interrupts input, not exit

✅ So the correct behavior:
When the inner minishell is simply waiting for user input, Ctrl+C should not terminate it.
It should:
- Print a newline
- Refresh the prompt
- NOT quit

🔍 What you observed earlier:

minishell$ ./minishell
minishell$ [SIGINT received]
[SIGINT received]
minishell$
Both shells received Ctrl+C

Both redrew the prompt ✅
Neither exited ✅

✅ So you’re behaving exactly like Bash does here.

🧪 Compare in Bash:

bash$ ./bash
bash$ ^C
bash$  # <-- still inside inner shell
✅ Exact match to what you have.

🚫 When should Ctrl+C terminate the shell?
Only if you're running a command that doesn’t handle signals and the user wants to abort the whole process (e.g. in a script or during heredoc parsing, etc.).

✅ Summary
Test	                      	Expected Behavior
-----------------------------------------------------
./minishell → Ctrl+C				Prompt redraws
Typing input → Ctrl+C				Input cancelled
Running command → Ctrl+C			Command killed
Inside readline() → Ctrl+C			Shell stays open

🧠 Signal Behavior Summary (Bash-like)
Signal	Key			Parent Shell					Child Process
SIGINT	Ctrl+C		Clears line + redisplay prompt	Terminates the process
SIGQUIT	Ctrl+\		Ignored							Terminates and prints Quit: 3
EOF		Ctrl+D		Exits shell						N/A


TERMINAL OUTPUT:
c3r9s3% ./minishell
minishell$ ./minishell
got input: [./minishell]
minishell$ 
minishell$ 
minishell$ 
minishell$ 
minishell$ ^C
minishell$ 
exit
minishell$ 
exit
c3r9s3% bash
mcalciat@c3r9s3:~/Cursus/git_minishell$ 
mcalciat@c3r9s3:~/Cursus/git_minishell$ bash
mcalciat@c3r9s3:~/Cursus/git_minishell$ 
mcalciat@c3r9s3:~/Cursus/git_minishell$ ^C
mcalciat@c3r9s3:~/Cursus/git_minishell$ 
exit
mcalciat@c3r9s3:~/Cursus/git_minishell$ 
exit


USING A GLOBAL VARIABLE TO FLAG THAT A SIGNAL IS BEING USED IN A PARENT OR A CHILD PROCESS

🔄 Why this happens:
When you press Ctrl-C, the SIGINT signal is sent to all processes in the foreground process group — including both the parent shell and any child processes (like echo, wc, etc.).

If both your parent shell and a child process receive SIGINT, and both trigger rl_on_new_line() / rl_redisplay(), you might get weird behaviors like:
- double prompts
- garbled inputs
- inconsistent redraws

✅ Solution:
Use a global int flag (the only type allowed by the Minishell subject!) to differentiate the parent shell process from the child process inside your signal handler.

✅ Example:

// global variable (allowed by subject)
volatile sig_atomic_t g_is_parent = 1;
Then in your shell setup (e.g., in main() or right before readline() loop):

g_is_parent = 1; // set this only in parent shell
In the fork()ed child:


g_is_parent = 0; // child won't trigger rl_on_new_line()
Then modify your sigint_handler:


void	sigint_handler(int sig)
{
	if (sig == SIGINT && g_is_parent)
	{
		write(1, "\n", 1);
		rl_on_new_line();
		rl_replace_line("", 0);
		rl_redisplay();
	}
}
This way, only the parent shell handles redrawing the prompt — child processes will exit or do their own thing without interfering with prompt display.

🧠 Why volatile sig_atomic_t?
volatile: tells the compiler this variable might change unexpectedly (e.g., via signal handler)

sig_atomic_t: a type safe to use in signal handlers (usually int underneath)

✅ Summary:
Concept										Should you do it?
Use rl_on_new_line() only in the parent?	✅ Yes
Use global int flag?						✅ Yes, allowed and useful
Call rl_on_new_line() in child?				❌ Never
Use volatile sig_atomic_t for safety?		✅ Recommended


**********************************************************
** 🚨🚨 Use a global int to detect parent vs child.🚨🚨 **
**********************************************************

📑 Step-by-Step Implementation Plan
----------------------------------------
1. Add the global flag for process context

In signal_handler.c:

// At the top (outside functions)
	volatile sig_atomic_t	g_is_parent = 1; ✅

⚠️ Also declare it in your signal_handler.h:
	extern volatile sig_atomic_t g_is_parent; ✅

2. Update main() to set it properly
In minishell.c, just after setup_signals_interactive():

	g_is_parent = 1; ✅

This tells the signal handler you're in the parent shell.

3. In all child processes, set the flag to 0
Anywhere you fork(), set:
	g_is_parent = 0;

Examples:

In fork_pipes(): ✅
	if (pid == 0)
	{
		g_is_parent = 0;

In fork_and_execute(): ✅

	if (pid == 0)
	{
		g_is_parent = 0;

In execute_child_builtin():✅

	if (pid == 0)
	{
		g_is_parent = 0;

4. Modify catch_sigint() to check the flag ✅

void	catch_sigint(int signum)
{
	if (g_is_parent)
	{
		(void)signum;
		write(1, "\n", 1);
		rl_replace_line("", 0);
		rl_on_new_line();
		rl_redisplay();
	}
}
This prevents child processes from redrawing the prompt.

5. Bonus polish for SIGQUIT ✅

You already do this correctly:
	signal(SIGQUIT, SIG_IGN); // In interactive mode

In children (e.g., setup_signals_child()):

	signal(SIGINT, SIG_DFL);
	signal(SIGQUIT, SIG_DFL);

Optional: in the parent waitpid() section (if not already): ✅

if (WIFSIGNALED(status))
{
	if (WTERMSIG(status) == SIGINT)
		write(1, "\n", 1);
	else if (WTERMSIG(status) == SIGQUIT)
		write(1, "Quit: 3\n", 8);
}


🧪 Final Test
Launch your minishell:

./minishell
Run:
echo hello | wc -l

While waiting at the prompt, press Ctrl-C — you should only see:

^C
minishell$

==================

🔖🔖 EXPLANATION REGARDING THE SYNTAX AND THE NAME OF THE GLOBAL VARIABLE 🔖🔖

 🔖 Why `g_is_parent`?

We chose `g_is_parent` because:

- ✅ **`g_`**: According to the [42 Norms summary you uploaded](#8), all global variables **must** start with `g_`.
- ✅ **`is_parent`**: It's a descriptive name that clearly means “this is the **parent shell process**.”
- So:  

  g_is_parent = 1; // we're in the shell's main process  
  g_is_parent = 0; // we're in a child process (like a command or pipe stage)
  ```
That name helps anyone reading your code immediately understand the purpose without needing a comment.

🔖 What is `volatile sig_atomic_t`?

 🧠 `sig_atomic_t`
- It’s a special **integer type** guaranteed to be accessed safely in **signal handlers**.
- Basically: it’s safe to read and write this variable **even when interrupted by signals**.

If you just used a regular `int`, the compiler **might optimize** access in a way that breaks things in a signal context (like caching or partial writes).
> ✅ Use `sig_atomic_t` for **any variable shared between main code and a signal handler**.

 ⚡ `volatile`
- Tells the compiler: “**Don’t optimize this variable**, it might change unexpectedly.”
- Why? Because signals can interrupt code at *any time*, so the compiler must always **read from memory**, not from a register or cache.

Together: 		volatile sig_atomic_t g_is_parent;

Means > “This is a **global**, **signal-safe**, and **always up-to-date** flag for whether we’re in the parent process.”

✅ Summary

| Modifier          | Purpose                                                                 |
|-------------------|-------------------------------------------------------------------------|
| `g_` prefix        | Required by 42 Norm for global variables                               |
| `is_parent`        | Descriptive, tells us what the variable tracks                         |
| `volatile`         | Prevents compiler from optimizing it away, ensures real-time updates   |
| `sig_atomic_t`     | Ensures safe, atomic access in signal handlers                         |

Let me know if you want help putting this into your `.h` and `.c` files with correct includes!

====================================================

RECAP OF KEY COMPONENTS IN SIGNAL HANDLING IN Minishell

Function						Where it's used			Purpose
setup_signals_interactive()		🟢 Parent only (shell)	Setup signals like Bash for the prompt (SIGINT clears line, etc.)
setup_signals_child()			🔵 Child only			Reset signals to default (terminate on SIGINT/SIGQUIT)
handle_exit_status()			🟢 Parent only			After waitpid(), read child's exit and update prompt + print if needed
catch_sigint()					🟢 Parent only			Custom handler for Ctrl+C at prompt — clears line and redisplays

🔁 Step-by-Step Example with Signals
--------------------------------------
Let's imagine this full scenario:

		> minishell$ sleep 10 | wc -l

-------------------------------------------------
🟢 Normal workflow - no signals used yet
-------------------------------------------------

🔹 Step 1: Shell Starts

int main()
{
	setup_signals_interactive(); // 🟢
	g_is_parent = 1;
}

✔️ SIGINT (Ctrl+C)  → custom handler (catch_sigint)
✔️ SIGQUIT (Ctrl+\)	→ ignored
✔️ Shell is ready to receive input

🔹 Step 2: User inputs command

> minishell$ sleep 10 | wc -l

🔸 readline() returns the input
🔸 Tokens are parsed
🔸 Execution begins
🔸 The shell forks twice:
	fork() → child process for sleep
	fork() → child process for wc

🔹 Step 3: In child processes (e.g., sleep, wc)

if (pid == 0)
{
	g_is_parent = 0;
	setup_signals_child(); // 🔵
}

✔️ SIGINT (Ctrl+C) → terminates the child
✔️ SIGQUIT (Ctrl+) → prints Quit: 3 and terminates

🔹 Step 4: Parent waits

waitpid(pid, &status, 0);
handle_exit_status(status, env); // 🟢

-------------------------------------------------
🔴 SCENARIO A: Ctrl+C (SIGINT) during command
-------------------------------------------------
User presses Ctrl+C while sleep or wc is running.

Result:
🔵 In child:
				SIGINT → child process is terminated

🟢 In parent:

		if (WTERMSIG(status) == SIGINT)
			write(1, "\n", 1);

✔️ A newline is printed
✔️ $? becomes 130 (128 + SIGINT)
✔️ Prompt returns cleanly

-------------------------------------------------
🟠 SCENARIO B: Ctrl+\ (SIGQUIT) during command
-------------------------------------------------
User presses Ctrl+\ during sleep or wc.

Result:
🔵 In child:
			SIGQUIT → prints Quit: 3, terminates

🟢 In parent:

			if (WTERMSIG(status) == SIGQUIT)
				write(2, "Quit: 3\n", 8);

✔️ "Quit: 3" is printed
✔️ $? becomes 131 (128 + SIGQUIT)
✔️ Prompt returns

-------------------------------------------------
🟢 SCENARIO C: Ctrl+C while idle at the prompt
-------------------------------------------------

User presses Ctrl+C with nothing running, just at:
		> minishell$
No child processes running - Function readline() is active

Result:
🟢 Parent receives SIGINT > catch_sigint() is triggered:

			write(1, "\n", 1);
			rl_replace_line("", 0);
			rl_on_new_line();
			rl_redisplay();

✔️ Clears the input line
✔️ Moves to a new line
✔️ Reprints prompt
✔️ $? stays the same


✅ Summary Chart of Behaviors
Where?		Signal		What Happens
-------------------------------------------------------------------------------
Prompt		Ctrl+C		Clears input line, prints new prompt
Prompt		Ctrl+\		Nothing (ignored)
Command		Ctrl+C		Child terminates, parent prints \n, $? = 130
Command		Ctrl+\		Child prints Quit: 3, parent prints same, $? = 131

1️⃣2️⃣3️⃣4️⃣5️⃣6️⃣7️⃣8️⃣9️⃣🔟❔❓⛔✅❎‼️🚫❗❌⭕✔️
🔰🔹🔸🔺🔻⇶→⚡📌📚📖📑📕📗📘📙🔶🔷🔴🟠🟢🟣🟡🔵
💭💬🔊📡⚠💡⭐🏁🚩🛟🔑📢🚨🔎🔍🔌🧮🧪🧵🧩🚀🐛
🎉🔖🔥🎯🍝🎓🍴😴😵🤔🫩💀👾👻💆✋🫶🙊🧠🐢🏆
🧱🎮🚪💣⚔️🛠️🔧🖨️💻🗑📥📦🔚🔁🔗⚙️🥊🥇🎧🎤
🕸🧉🧊🔦⏰☎️🔪✂️📍✏️🪄