https://www.gnu.org/software/bash/manual/bash.html
https://www.cs.purdue.edu/homes/grr/SystemsProgrammingBook/Book/Chapter5-WritingYourOwnShell.pdf
https://github.com/gleal42/42_Minishell/tree/master
===========================================================


1️⃣2️⃣3️⃣4️⃣5️⃣6️⃣7️⃣8️⃣9️⃣🔟❔❓⛔✅❎‼️🚫❗❌⭕✔️
🔰🔹🔸🔺🔻⇶→⚡📌📚📖📑📕📗📘📙🔶🔷🔴🟠🟢🟣🟡🔵
💭💬🔊📡⚠💡⭐🏁🚩🛟🔑📢🚨🔎🔍🔌🧮🧪🧵🧩🚀🐛
🎉🔖🔥🎯🍝🎓🍴😴😵🤔🫩💀👾👻💆✋🫶🙊🧠🐢🐛
🧱🎮🚪💣⚔️🛠️🔧🖨️💻🗑📥📦🔚🔁🔗⚙️🥊🏆🥇🎧🎤
🕸🧉🧊🔦⏰☎️🔪✂️📍✏️🪄

**Tasks:**
- Implement command execution engine:
  - Handle **fork**, **execve**, **waitpid**, return codes.
  - Search for binaries via `PATH`.
- Build the **pipe system**:
  - Support pipelines (`cmd1 | cmd2 | cmd3`).
  - Proper `dup2` and `close` handling.
- Handle **redirections**:
  - Input/output (`<`, `>`, `>>`) and **here_doc** (`<<`).
- Implement builtins that run inside forks:
  - `env`, `exit`.

- Ensure builtins run correctly inside and outside of child processes.
- Handle edge cases:
  - Expansion of `$?`, invalid redirections, quotes inside heredocs.
- Write signal-safe code and avoid leaks.

---

## 🧪 Phase 4: Testing & Debugging

- Write test scripts for:
  - Syntax errors
  - Piped commands
  - Redirections (especially nested)
  - Ctrl+C/D signals
- Run valgrind for **leak checks**.
- Create a defense folder with test inputs.

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

====================
* 🧪 Test cases 🧪 *
====================

1. Basic Command Execution
Test Case 1: Execute a basic command (e.g., echo "Hello World")
Input: echo "Hello World"
Expected Output: Hello World

Test Case 2: Execute a command with arguments (e.g., ls -l)
Input: ls -l
Expected Output: List of files with details

2. Command with Pipe
Test Case 3: Pipe two commands together (e.g., echo "Hello World" | grep "Hello")
Input: echo "Hello World" | grep "Hello"
Expected Output: Hello World

Test Case 4: Pipe a command with no matching output (e.g., echo "test" | grep "abc")
Input: echo "test" | grep "abc"
Expected Output: (empty output, just the prompt)

3. Multiple Commands with Pipe
Test Case 5: Pipe three commands (e.g., echo "Hello" | tr "a-z" "A-Z" | sort)
Input: echo "Hello" | tr "a-z" "A-Z" | sort
Expected Output: HELLO

4. Redirection (Output)
Test Case 6: Redirect output to a file (e.g., echo "Test Output" > testfile.txt)
Input: echo "Test Output" > testfile.txt
Expected Output: No output on terminal, but file testfile.txt should contain Test Output

Test Case 7: Append output to an existing file (e.g., echo "New Line" >> testfile.txt)
Input: echo "New Line" >> testfile.txt
Expected Output: No output on terminal, but testfile.txt should contain Test Output followed by New Line

5. Redirection (Input)
Test Case 8: Redirect input from a file (e.g., sort < testfile.txt)
Input: sort < testfile.txt
Expected Output: Sorted contents of testfile.txt

6. Redirection with Pipe
Test Case 9: Combine redirection and pipe (e.g., cat testfile.txt | grep "pattern" > output.txt)
Input: cat testfile.txt | grep "pattern" > output.txt
Expected Output: No output on terminal, but output.txt should contain the lines matching "pattern"

7. Command with Invalid Arguments
Test Case 10: Invalid command (e.g., nonexistentcommand)
Input: nonexistentcommand
Expected Output: bash: nonexistentcommand: command not found (or similar error depending on your shell`s behavior)

8. Piping and Redirection Together
Test Case 11: Pipe and redirect output in a single line (e.g., echo "test" | grep "test" > result.txt)
Input: echo "test" | grep "test" > result.txt
Expected Output: No output on terminal, but result.txt should contain test

9. Multiple Pipes
Test Case 12: Pipe multiple commands (e.g., echo "apple" | tr "a-z" "A-Z" | rev | cut -c 1-3)
Input: echo "apple" | tr "a-z" "A-Z" | rev | cut -c 1-3
Expected Output: ELP

10. Edge Case: Empty Command
Test Case 13: Empty input (e.g., user just presses enter)
Input: ``
Expected Output: (No output, just a new prompt)

11. Command with Environment Variable
Test Case 14: Use environment variable (e.g., echo $HOME)
Input: echo $HOME
Expected Output: The path to the user`s home directory

12. Command with Special Characters
Test Case 15: Using special characters like & or ; (e.g., echo "hello"; echo "world")
Input: echo "hello"; echo "world"
Expected Output:
hello
world

13. Nested Pipes and Commands
Test Case 16: Nested pipes (e.g., cat file.txt | grep "pattern" | sort)
Input: cat file.txt | grep "pattern" | sort
Expected Output: Sorted output of lines from file.txt containing "pattern"

14. Command with Background Process
Test Case 17: Running a command in the background (e.g., sleep 5 &)
Input: sleep 5 &
Expected Output: No immediate output; process runs in the background and returns control to the shell.

15. Exit Command
Test Case 18: Exit the shell (e.g., exit)
Input: exit
Expected Output: Shell terminates.

16. Pipe with Commands Containing Arguments
Test Case 19: Pipe commands with multiple arguments (e.g., ls -l | grep "test" | sort -r)
Input: ls -l | grep "test" | sort -r
Expected Output: Sorted list of files containing "test" in reverse order.

17. Handling Error in Redirection
Test Case 20: Trying to redirect to a directory (e.g., echo "Hello" > /home/user/)
Input: echo "Hello" > /home/user/
Expected Output: bash: /home/user/: Is a directory

18. Invalid Pipe
Test Case 21: Pipe with an invalid command (e.g., echo "Test" | nonexistentcommand)
Input: echo "Test" | nonexistentcommand
Expected Output: Error message like bash: nonexistentcommand: command not found

19. Redirecting to an Existing File
Test Case 22: Overwrite a file with > (e.g., echo "New content" > existingfile.txt)
Input: echo "New content" > existingfile.txt
Expected Output: File existingfile.txt should now contain "New content" instead of its previous contents.

20. Redirection with Multiple Pipes
Test Case 23: Multiple pipes and redirection (e.g., echo "apple orange" | tr " " "\n" | sort > fruits.txt)
Input: echo "apple orange" | tr " " "\n" | sort > fruits.txt
Expected Output: No terminal output, but fruits.txt should contain apple and orange sorted.


Edge Cases: It`s important to test edge cases such as empty strings, invalid syntax, and missing arguments.

Error Handling: minishell must handle errors gracefully (e.g., invalid commands, invalid arguments for redirection).

Special Characters: Special characters (like &, |, ;) have to be handled correctly.



1️⃣2️⃣3️⃣4️⃣5️⃣6️⃣7️⃣8️⃣9️⃣🔟❔❓⛔✅❎‼️🚫❗❌⭕
🔰🔹🔸🔺🔻⇶→⚡📌📚📖📑📕📗📘📙🔶🔷🔴🟠🟢🟣🟡🔵
💭💬🔊📡⚠💡⭐🏁🚩🛟🔑📢🚨🔎🔍🔌🧮🧪🧵🧩🚀
🎉🔥🎯🍝🎓🍴😴😵🤔🫩💀👾👻💆✋🫶🙊🧠🐢🏆
🧱🎮🚪💣⚔️🛠️🔧🖨️💻🗑📥📦🔚🔁🔗⚙️🥊🥇🎧🎤
🕸🧉🧊🔦⏰☎️🔪✂️📍✏️🪄

minishell$ ./minishell
minishell$ echo asdasd
asdasd
minishell$ exit
munmap_chunk(): invalid pointer
 ------

minishell$ env | grep DISPLAY
DISPLAY=:0
^C
minishell$ minishell$ 
 ---------



-------------------------------
minishell$ echo ?!
?!
minishell$ ./minishell
minishell$ 
exit
minishell$ echo ?!
zsh: segmentation fault (core dumped)  ./minishell

