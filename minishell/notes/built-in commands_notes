BUILTINS COMMANDS

🛠️ BUILTINS COMMANDS
------------------------
We were asked to remake the following builtins:

echo with option ’-n’
cd with only a relative or absolute path
pwd without any options
export without any options
unset without any options
env without any options and any arguments
exit without any options

✅ A. BUILTINS TO IMPLEMENT (NO FORK NEEDED)

🚨 These commands **must be executed directly by the shell**, not in a child process.

📌 1. `echo`
**File**: `builtin_echo.c`  
**Behavior**:
- Prints arguments to `stdout`, separated by spaces, followed by a newline.
- It writes all the non-flag tokens to the standard input in order, separated by spaces, followed by a linebreak (\n)

- If the `-n` option is given, suppresses the newline.

**Example**:

> echo hello world      # prints "hello world\n"
> echo -n hello world   # prints "hello world"

**Considerations**:
- Handle multiple `-n` (like `echo -n -n hi` should suppress newline).
- Should be interruptible by `Ctrl+C` before execution starts.




---

📌 2. `cd`
**File**: `builtin_cd.c`  
**Behavior**:
- Changes the current working directory.
- Without args → go to `$HOME`.
- If directory doesn’t exist, print error to stderr.

**Example**:
```bash
cd
cd ../folder
```

**Considerations**:
- Update `PWD` and `OLDPWD` environment variables.
- Use `chdir()` and `getcwd()` properly.
- Errors like "no such file or directory" should be handled gracefully.
- Needs access to the environment list (`envp`).

---

📌 3. `pwd`
**File**: `builtin_pwd.c`  
**Behavior**:
- Prints the current working directory.

**Example**:
pwd
```

**Considerations**:
- Use `getcwd()`.
- No options needed.
- Very simple, but must still handle error if `getcwd()` fails (e.g., permission issues).

---

📌 4. `export`
**File**: `builtin_export.c`  
**Behavior**:
- Without arguments: prints the environment variables sorted alphabetically.
- With arguments: sets or updates environment variables.

**Example**:
```bash
export VAR=value
export PATH=/usr/local/bin
```

**Considerations**:
- Validate identifier (e.g., no starting with `=` or numbers).
- When printing, format as `declare -x VAR="value"` like Bash does.
- Must not duplicate or overwrite unless correctly defined.

---

📌 5. `unset`
**File**: `builtin_unset.c`  
**Behavior**:
- Removes variables from the environment.

**Example**:
```bash
unset PATH
```

**Considerations**:
- Validate identifier before removing.
- Silent if variable does not exist (no error printed).

---

✅ B. BUILTINS TO IMPLEMENT (IN CHILD PROCESS)

These **must be executed in a child process**, not directly in the shell.

📌 6. `env`
**File**: `builtin_env.c`  
**Behavior**:
- Prints the current environment variables.
- No arguments or options supported.

**Example**:
```bash
env
```

**Considerations**:
- Should not print anything if environment is empty.
- Ignore invalid arguments (i.e., do not implement argument parsing).

---

📌 7. `exit`
**File**: `builtin_exit.c`  
**Behavior**:
- Exits the shell.
- Accepts an optional numeric argument (exit code).

**Example**:
```bash
exit          # exits with previous return value
exit 42       # exits with code 42
exit 42 43    # print error: "too many arguments", no exit
exit abc      # print error: numeric argument required, exit with 255
```

**Considerations**:
- If called inside a pipeline, it should only exit the child, not the shell.
- Only exit the whole shell if it's a standalone command.
- Must properly clean up memory.

---

## 🚩 Additional Builtin-Related Info (from subject and Bash behavior)

### Interruptibility:
- All builtins must respond correctly to `Ctrl+C` (SIGINT) in **interactive mode**.
- `env` or `exit` (when forking) must restore default signal handlers in the child process.

### Redirections and Pipelines:
- Builtins like `echo`, `env`, and `pwd` may be used in pipelines and redirections:
  
  echo hello | cat
  pwd > file.txt
  
  For that, the execution mechanism must detect whether to run in parent or forked child depending on context.

### Execution in Parent Shell:
- Only `cd`, `export`, `unset`, and `exit` (when alone) must **NOT fork** because they modify the shell’s state.

### SIGINT, SIGQUIT:
- You're already handling Ctrl+C with `setup_signals_interactive()` (good).
- Ensure child processes get `setup_signals_child()` (restore default behavior).

---
 ✅ Final Builtin List (from subject):

| Command   | Forked? 			| Args/Options? 			| File |
|--------   |--------			|--------------				|------|
| `cd`      | No 				| [path] 					| `builtin_cd.c` |
| `echo` 	| Yes 				| `[-n] [args...]` 			| `builtin_echo.c` |
| `env` 	| Yes 				| (no args) 				| `builtin_env.c` |
| `exit` 	| No (when alone) 	| `[n]` 					| `builtin_exit.c` |
| `export` 	| No 				| `[VAR=value]` or none 	| `builtin_export.c` |
| `unset` 	| No 				| `[VAR]` 					| `builtin_unset.c` |
| `pwd` 	| Yes 				| (no args) 				| `builtin_pwd.c` |

======================================================================================

📢📕📗📘📙→🚨🔍⚠💡🎮 🎉 🔰🏁🚩🛟🔶🔷🔴🟠🟢🟣🟡🔵⇶🙊 🍝🧠🐢 🛠️🔧💭💀🔊📡 
1️⃣2️⃣3️⃣4️⃣5️⃣6️⃣7️⃣8️⃣9️⃣🔟.🚫❗⭐ 😴😵🍴🤔 📦 🗑📥🚀🔥🎯 ❌⭕ 🔹🔸🔺🔻📌🧪🧵🧩❔❓⛔❎✅

======================================================================================
✅ Suggested Temporary Setup
Make a test file (e.g., test_echo.c) in your sources/builtins/ directory or elsewhere.

Simulate the arguments as if they were parsed by the shell (i.e., argv style).

Call your builtin_echo() function with fake arguments.