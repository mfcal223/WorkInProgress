🍴🍝🤔 PHILOSOPHERS 😴😵
=======================
INDEX:
└── [1] Philosophers Project Overview (check file "Project_Philosophers")
└──	[2] THREADS / Synchronization / Mutex lock (check file "Project_Philosophers")
└──	[3] Managing Threads’ Shared Memory (check file "Project_Philosophers")
└── [4] Links / Bibliography(check file "Project_Philosophers")
└── [5] BUILDING THE PROJECT (check file "Building_the_table")
└── [6] CHECKLIST AND TEST CASES (check file "Testing_philosophers")

📢 Disclaimer: 📢
------------
these text files will contain a summary of the project, a brief theoretical explanation of the most important concepts, 
a summary on how I build the project. I have not made the bonus part (using processes and sempahores). therefore there 
will be amost no information about it. Finally, there is a checklist for self-evaluation created by my friend and collegue
Maria Sofia Piantan, which she most generously gave me.

📢 PLEASE GO TO file "Project_Philosophers" TO CHECK PROJECT SUMMARY IF YOU ARE NOT FAMILIAR WITH IT.

=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=

⭐⭐ [5] BUILDING THE Project ⭐⭐
================================

1️⃣ Check the input 
2️⃣ Create a data structure to store all required information about a philosopher
    💡 Some variables have to be shared between all philosophers so take this into account when creating your data structures.
2️⃣ Initialize the structures. 
3️⃣ Create the correct number of philosopher, threads and mutexes.
4️⃣ Create a routine
    💡 What each philosopher has to do ? In which order ?
	📌 Your philosophers have to do the following things (in order) in the routine.
				🍝 Eat
				😴 Sleep
				🤔 Think
				❗ Repeat until death 💀
5️⃣ Initiate the threads with said routine
6️⃣ Create a loop that runs until any of your philosophers die. (If you have to loop until any of your philosphers 
die, it might be a good idea to check in the routine if any of your philosopher has died.)
7️⃣ Close and clean everything elegantlly when simulation ends. 
8️⃣ Check for memory leaks and data races.
9️⃣ Use checklist to confirm you have taken care of everything.
🔟 Use the different test cases to challenge your program.

1️⃣ INPUT CHECKS  
----------------

📌 Input validation:

	✅ Correct number of arguments (must be 5 or 6).
	✅ All arguments are numeric (digits only).
	✅ Integer conversion is safe (handles overflows).
	✅ Values fall within acceptable ranges:
	🔹argv[1]: Number of philosophers (1 to 200).
	🔹argv[2]-argv[4]: Time values (minimum 60 ms).
	🔹argv[5] (optional): Number of meals (must be greater than 0).

2️⃣ STRUCTURE CREATION 

📌 Header File (philo.h)
Defines structures, constants, and function prototypes.

🗃 Libraries to be included: 
-----------------------------

💡 # include <pthread.h>
🔺 pthread_mutex_t and pthread_t are predefined structures in the POSIX Threads (pthreads)
pthread_mutex_t is a mutex (mutual exclusion) object used for thread synchronization.
It is initialized with pthread_mutex_init().
It is locked/unlocked with pthread_mutex_lock() and pthread_mutex_unlock().

🔺 pthread_t is a thread identifier used to manage individual threads.
It is created using pthread_create().
It is used to manage threads with pthread_join() or pthread_detach().

💡 # include <stdint.h> //to use uint64_t

🔺 What is uint64_t?
uint64_t is a fixed-width unsigned integer type that is exactly 64 bits (8 bytes) in size. 
It is part of the C standard library and is defined in stdint.h.

Properties of uint64_t:
🔹 Represents only positive numbers (unsigned).
🔹 Always 64 bits wide, regardless of the system architecture (32-bit or 64-bit).
🔹 Useful for timestamps (e.g., storing milliseconds in a philosopher simulation).
u_int64_t is used for time-related variables to ensure precision and compatibility across different systems.
This is important for accurately measuring time intervals in the simulation. The use of unsigned integers
also ensures that time values are always positive, 64 bits provides a wide range of values to work with.

💡 # include <sys/time.h> 	// to use get_time_ms() 

🔺 get_time_ms() is a function that will use <sys/time.h> and struct timeval a predefined structure 
in <sys/time.h> that contains:

						struct timeval 
						{
							time_t      tv_sec;   // Seconds
							suseconds_t tv_usec;  // Microseconds
						};

🔺tv_sec → The number of whole seconds.
🔺tv_usec → The number of microseconds (1,000,000 per second).

It will store this information in the timeval variable tv and use it to obtain current time. 

🛟 Timestamping: keeping good track of the time and the timestamps is important, as they define if the program
 will work or not. Timestamps will be uso to determine the routine rhythm, the death_time, and synchronizing all
 this is key to prevent deadlocks.

3️⃣ INITIALIZE STRUCTURES / ELEMENTS CREATION.
------------------------------------------------

🔶 Initialize your structures. 
🔶 Allocate memory for your threads and mutexes.
		🔹malloc(sizeof(t_philo)
		🔹malloc(sizeof(pthread_t)
		🔹malloc(sizeof(pthread_mutex_t)
🔶 Initialize the threads: philosophers && monitors.
		🔹pthread_create()
🔶 Initialize forks and all the mutexes.
		🔹pthread_mutex_ini()

🚨🚨🚨 REMEMBER SUBJECT PROMPT AND THE CONDITIONS REGARDING THE AMOUNT OF THREADS AND FORKS.

🍴 FORK LOGIC
-------------
There will be as many forks as philosophers, but every philosopher will need to obtain / grab / take 2 forks.
There are different ways to assign them: as an array, in a circular linking, etc.

I choose to do it in an array, based on the number of philosophers: the fork with the same index as the philosopher
is assign to the "left" hand, and the one for the right would be [i - 1]. In the particular case for 
philosopher [0], right one was [num_philo - 1], so he was using, the fork of the philo with the highest index. 

	🎯 forks are stored in an array inside my main structure and each philosopher takes 
		forks from this array without looping back.

🔍 Example: there are 4 Philosophers (ID: 1, 2, 3, 4) 
	Philosopher	🏛		Left Fork	Right Fork
	Philo 1 (index 0)	forks[0]	forks[3] (last fork)
	Philo 2 (index 1)	forks[1]	forks[0]
	Philo 3 (index 2)	forks[2]	forks[1]
	Philo 4 (index 3)	forks[3]	forks[2]

	🔸 Each fork is represented by main_struct->forks[i].
	🔸 Each philosopher’s left fork is main_struct->forks[i].
	🔸 Each philosopher’s right fork is main_struct->forks[i - 1], except for Philosopher 1, 
		who takes the last fork as their right fork (fork 3).

🔶 Step-by-Step Fork Assignment (for data->philo[i]):

 📌Implementing init_forks()
Since forks are just mutexes inside an array, init_forks() will:

Initialize each fork mutex in data->forks[i].
Assign each philosopher’s left and right fork using the rules above.
(first philosopher is assign fork [0] and last fork (num_philos -1))

Each philosopher has two fork references:
pthread_mutex_t	*left_fork;
pthread_mutex_t	*right_fork;
However, these are just pointers to data->forks[i]. The mutexes only exist in t_data.

🔹 There are NO redundant fork mutexes.
🔹 All fork mutexes are necessary.

3️⃣ THREAD CREATION 
To create the threads we are going to use the function pthread_create().

In my model of program I used 3 "types" of threads:
🏛 Each philosopher is a separate thread (pthread_create). 
💀 A monitor thread: to check is any philosopher has died.
🧑‍🍳 A meal monitor: to check if all philosophers have eaten enough (argument number 6 if defined = number_of_meals)


4️⃣ SIMULATION MANAGEMENT: 
-------------------------

When using pthread_create() you will declare the function that the thread will execute.

🏛 philosophers --> function that handles the routine
💀 death monitor -- > function that handles death recognition
🧑‍🍳 meal monitor --> function that keeps track of meal count for all philosophers.


Depending on the workflow of the program, you need to configure a way for the monitors to trigger the end of the
 simulation when either of these conditions are met:
 🪫 a philosopher has not eaten about the time_to_die
 🥴 all philosphers have eaten as many times as define byt argument[6]

⏰ THE ROUTINE ⏰
------------------------
 
Each philosopher is a separate thread, running a loop that follows the routine (in order):
				🍝 Eat
				😴 Sleep
				🤔 Think
				❗ Repeat until death 💀

💡 Consider separating the handling for only 1 philosopher. 
	By definition he cannot survive, as there is only one fork.

💡 You might need to add "usleep()" or any other "waiting_time()" her and there to prevent 
	overloading the CPU or to prevent some philosophers from doing something.


⏰ Routine Entry: 
-----------------
If the philosopher’s ID is even, it waits briefly before starting.
  This prevents all threads from trying to access forks at the same time, helping avoid deadlocks at the start of
  the simulation.

⏰  Main Loop:
--------------
While the simulation is still active:

  a. Check if simulation should continue
     - A shared flag (`keep_iterating`) protected by a mutex is checked 
       to avoid race conditions.

  b. Death Check
     - Before doing anything, the philosopher checks if they’ve already died.

  c. Try to take both forks
     - Forks are represented by mutexes. 
     - The program ensures consistent locking order (e.g., lower-indexed mutex first)
       to prevent deadlocks.
     - If the philosopher is the only one in the simulation (1 philosopher case),
       they will pick up one fork and eventually die, as they can`t proceed.

  d. Eat
     - If forks were successfully taken:
       - The philosopher updates the last meal timestamp (with a mutex).
       - A message is printed.
       - The meal count is increased (with a mutex).
       - The thread sleeps for `time_to_eat`.

  e. Release both forks
     - Forks are unlocked after eating.

  f. Sleep
     - The philosopher prints a message and sleeps for `time_to_sleep`.

  g. Think
     - The philosopher prints a message and thinks briefly (small delay).


 ⏰ Exit Condition: 
-------------------
- The loop exits if:
  - The simulation is marked as finished (someone died or all are full).
  - The philosopher dies.
  - They fail to acquire forks or another fatal condition occurs.

This structure ensures that:
- Only one thread prints at a time (via a print mutex),
- Fork access is protected (fork mutexes),
- Shared data is synchronized (meal counts, death flags),
- The program is free of deadlocks and race conditions (when logic is respected).

📢📕📗📘📙→🚨🔍⚠💡🎮 🎉 🔰🏁🚩🛟🔶🔷🔴🟠🟢🟣🟡🔵⇶🙊 🍝🧑‍🍳🧠🐢 🛠️🔧💭💀🪫⏰
1️⃣2️⃣3️⃣4️⃣5️⃣6️⃣7️⃣8️⃣9️⃣🔟✅.🚫❗⭐🥴  😴😵🍴🤔 🗑📥🚀🔥🎯 ❌ 🔹🔸🔺🔻📌🧪🧵🏛
[5] BUILDING THE Project
	INPUT CHECKS && STRUCTURE CREATION. 
		Input validation.
		CREATE  STRUCTURES
			The Header file (philo.h)
		INITIALIZE STRUCTURES AND MUTEXES
			FORK LOGIC
		THREAD CREATION 
		SIMULATION MANAGEMENT
			THE ROUTINE
			//DEATH Monitor
			//MEAL Monitor
			//ENDING THE SIMULATION


=======================================
 Death Monitor, Meal Monitor & Ending
=======================================

The simulation includes two dedicated threads for monitoring:
  - One checks if a philosopher has died.
  - The other checks if all philosophers have eaten enough (optional).

Both threads run in parallel with philosopher threads and use mutexes to safely
read and modify shared state.

------------------------------
 1. Death Monitor (check_death)
------------------------------

-> Created at the start of the simulation in init_threads().
-> Continuously loops through all philosophers to check if any have died.

  a. For each philosopher:
     - Compares current time with their last_meal_time.
     - If the time exceeds time_to_die, the philosopher is considered dead.

  b. When a philosopher dies:
     - end_simulation() is called.
     - It sets:
       - `keep_iterating = 0`
       - `dead = 1`
     - These are protected with the `death_lock` mutex.
     - A death message is printed.

  c. Exits the monitoring loop as soon as a death is confirmed or the simulation ends.

------------------------------
 2. Meal Monitor (check_meals)
------------------------------

-> Only created if the optional 6th argument (must_eat_count) is provided.
-> Also created in init_threads().

  a. Iterates through all philosophers:
     - Checks if each has eaten at least the required number of meals.
     - Each philosopher`s meal count is protected with its own mutex.

  b. If all philosophers meet the goal:
     - end_simulation() is called.
     - `keep_iterating` and `dead` are updated the same way.

  c. Exits the loop if:
     - All meals are completed.
     - A philosopher has died.
     - The simulation was stopped.

------------------------------
 3. End of Simulation (end_simulation)
------------------------------

-> Called by either the death monitor or the meal monitor.
-> Its job is to safely signal that the simulation should stop.

  - Locks `death_lock`.
  - If `keep_iterating` is still true:
     - Sets `keep_iterating = 0`
     - Sets `dead = 1`
  - Unlocks the mutex.

-> Optionally, it also finds the philosopher who died and prints the death message.

------------------------------
 4. Key Points Where Flags Are Checked
------------------------------

Philosopher threads constantly check if they should stop:

✔ check_keep_iterating(data)
   - Returns false if `keep_iterating == 0` or `dead == 1`.

✔ has_died(philo)
   - Before taking forks or eating, the philosopher verifies they are not dead.

✔ Main loop condition in philo_routine()
   - Continually checks `check_keep_iterating()` before and after every action.

✔ print_msg(philo, msg)
   - Messages are only printed if the simulation is still active.

------------------------------
 5. sync_threads()
------------------------------

-> Called at the end of init_admin().
-> Waits for all threads to finish:
   - Waits for death_monitor to return.
   - Waits for meal_monitor (if created).
   - Waits for all philosopher threads.

✔ This ensures the main thread does not exit early.
✔ It allows a graceful shutdown after the simulation ends.

------------------------------
 Summary
------------------------------

- The death monitor ensures no philosopher exceeds time_to_die.
- The meal monitor optionally stops the simulation after enough meals.
- end_simulation() triggers the stopping mechanism.
- Flags are always accessed with mutex protection.
- sync_threads() guarantees that all threads end before exiting.

This design ensures a clean, race-free termination of the program.


 📌 What check_death() Should Do
Continuously loops, checking each philosopher’s has_died() status.
If a philosopher dies, it:
		Prints the death message.
		Stops the simulation.
		Returns immediately.
		Uses death_lock to prevent race conditions.

📌 What check_meals() Should Do
Monitors if all philosophers have eaten at least num_meal times.
If num_meal > 0 and all philosophers have eaten enough, it:
		Stops the simulation.
		Exits the function.



=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=.=

Workflow of MY Philosopher`s Program
====================================

1. Input Validation
Ensures that the program receives valid arguments before initializing the simulation..

validate_input(ac, av) → Checks the number and validity of arguments.
check_numbers(ac, av) → Iterates through arguments and verifies they are valid numbers.
is_number(str) → Ensures the string contains only numeric characters.
is_valid_number(num, index) → Checks if the number falls within the valid range.

📄 File: validation.c


2. Structures Initialization & Thread/Mutex Creation
Initializes core data structures, mutexes, and threads.

init_admin(ac, av) → Oversees data initialization and thread creation.
init_data(data, ac, av) → Allocates memory and initializes program parameters.
init_data_mutexes(data) → Initializes global mutexes (e.g., print_lock, death_lock).
init_forks(data) → Assigns a fork mutex to each philosopher.
init_philosophers(data) → Sets initial values for each philosopher.
init_threads(data) → Creates threads for philosophers and monitoring.
📌 Prepares all necessary data structures before starting the simulation.
📄 File: initialization.c​

Main()
├──validate_input()
│   ├── check_numbers()  
│   │    ├── is_number()  →  (Ensures digits only)
│   │    ├── ft_atol()    →  (Converts to integer)
│   │    └── is_valid_number() →  (Checks range)
│   ├── Final Validation & Error Handling  
│   └── Return 1 (Success) / 0 (Failure)
├─────────────────── init_admin()
│	│					├─ init_data()
│	│					│	└─ init_data_mutexes()
│	│					├─ init_philosophers()
│	│					│	└─ init_forks()
│	│					├─ init_threads() // creates philo-ths, death_monitor, meal_monitor
│	│						
│	└──if error --> close_adm()

3. Routine Setting
Defines philosopher actions (eating, sleeping, thinking).

philo_routine(philo) → Main routine executed by each philosopher thread.
take_forks(philo) → Locks both forks before eating.
lock_forks(philo, left_index, right_index) → Ensures proper fork locking order.
eat_philo(philo) → Philosopher eats, updates time, and increments meal count.
sleep_philo(philo) → Philosopher sleeps for time_to_sleep.
think_philo(philo) → Philosopher enters thinking state.
drop_forks(philo) → Releases both forks after eating.
📌 Defines the behavior of each philosopher during the simulation.
📄 Files: routine.c​routine, routine2.c​routine2

4. Death Check
Monitors if a philosopher has died.

check_death(data) → Thread responsible for detecting deaths.
monitor_philosopher_death(data) → Iterates through philosophers to check if any have died.
has_died(philo) → Determines if a philosopher has exceeded time_to_die.
should_stop_monitoring(data) → Checks if the simulation should stop.
📌 Ensures a philosopher’s death is detected immediately.
📄 Files: monitor_death.c​monitor_death, simulation.c​simulation

5. Printing of Messages
Handles the output of messages to prevent race conditions.

print_msg(philo, msg) → Displays philosopher actions (eating, sleeping, thinking, taking forks, dying).
get_time_ms() → Returns the current timestamp in milliseconds.
📌 Ensures that messages are printed correctly without overlapping.
📄 File: tools.c​tools

6. Freeing/Cleaning/Closing
Properly releases allocated memory and destroys mutexes.

free_philo_mutexes(data) → Destroys individual mutexes for philosophers.
free_global_mutexes(data) → Destroys global mutexes (print, death locks).
free_data(data) → Frees all allocated memory.
close_adm(data, str) → Calls cleanup functions and prints exit message.
📌 Prevents memory leaks and ensures proper cleanup at program termination.
📄 File: cleaning.c​cleaning

7. General Workflow Summary
Validate input.
Initialize structures, forks, and threads.
Start philosopher threads.
Each philosopher alternates between eating, sleeping, and thinking.
Monitoring threads check if a philosopher has died or if all have eaten enough.
If a philosopher dies, the simulation stops immediately.
Clean up resources before exiting.
📌 Manages the overall flow of execution to ensure proper simulation behavior.
📄 File: main.c​

==============================================
EVALUATION:

1) check if there is any global variables : norminette will flag them. 

2) check there is 1 thread per philosopher: 
- Each philosopher is assigned a thread within the loop in init_threads(), ensuring one thread per philosopher.
- (memory allocation is also determine by the number of philosophers , in init_data())

3) check there is only one fork per philosopher: 
- in init_data(): data->forks gets as much memory as number of philos
- in init_forks(): left fork is assign according to number of philo (its index). Then the other one that will be assign will belong to the "neighbour" philosopher.

4) check if here is a mutex per fork and that it´s used to check the fork and/or change it:
- in init_data_mutexes() , while loop asigns 1 fork_mutex per fork

5) check the outputs are never mixed up:
- print_msg() uses print_lock. The print_lock mutex prevents mixed-up output by enforcing exclusive access during message printing

6) check how the death of a philosopher is verified and if there is a mutex to prevent a philosopher from dying and starting to eat at the same time:
- philo_routine() checks for simulation status and chcks for dead-flag ON before eating. 
- take_forks() also checks for death before calculating which fork to take.
- eat_philos() ALSO has a check before doing anything else. 
they all use has_died() 
- has_died() function in simulation.c . It uses a mutex to safely access the dead flag before allowing further actions. The death_lock mutex ensures consistency, preventing a philosopher from eating after being marked as dead.

==============================================

Philosophers Project - Checklist

1. Compilation & Code Structure

✅ Program compiles without warnings using gcc and -Wall -Wextra -Werror.
✅ All functions adhere to 42 Norminette rules.
✅ No memory leaks (test with valgrind --leak-check=full ./philo).
✅ Code is modular (separate files for validation, initialization, routines, monitoring, printing, and cleanup).
✅ No global variables (verified using norminette --checkForbidden).

2. Argument Parsing and Validation

✅ Check if the argument count is between 5 and 6.
✅ Validate that arguments are positive integers.
✅ Handle invalid input gracefully (error message and proper return).
✅ Edge Cases: Zero or negative numbers should return an error.

3. Initialization of Data Structures

✅ Allocate memory for philosophers and forks.
✅ Initialize mutexes (forks, print_lock, death_lock, mut_die_t).
✅ Initialize philosopher’s attributes:

id

meals_eaten

last_meal_time

left_fork and right_fork

Reference to t_data structure.
✅ Set dead flag to 0 (not dead).

4. Threads and Actions

✅ Create one thread per philosopher.
✅ Handle one-philosopher case: He should die after picking up a fork.
✅ Implement philosophers’ actions:

Thinking

Picking up forks

Eating

Sleeping
✅ Implement a monitor thread:

Check philosopher deaths.

Verify if all philosophers have eaten enough.

Ensure proper synchronization.
✅ Time Management:

Track timestamps using gettimeofday().

Use usleep() for simulating actions.
✅ Cleanup:

Destroy all mutexes.

Free allocated memory.

5. Input Handling & Error Management

✅ Handle invalid arguments correctly.
✅ Handle invalid argument count gracefully.
✅ Handle memory allocation failures.
✅ Check for deadlocks: Ensure correct mutex locking/unlocking.
✅ Ensure no out-of-bounds memory access.

6. Debugging & Performance

✅ Valgrind: No memory leaks (valgrind --leak-check=full ./philo).
✅ Helgrind: No thread errors (valgrind --tool=helgrind ./philo).
✅ Test with different numbers of philosophers.
✅ Edge Cases:

One philosopher (should die after taking a fork).

Philosophers reach meal goal and stop.
✅ Test extreme time constraints:

Very short or very long time values.
✅ No segmentation faults or crashes.
✅ Check thread synchronization.

Here is the complete **list of test cases**, now clearly separated into **mandatory** (`./philo`) and **bonus** (`./philo_bonus`).  

---

## **Mandatory Part Test Cases (`./philo`)**

### **Basic Cases (No Philosopher Should Die)**
```
./philo 5 800 200 200
./philo 7 800 200 350
./philo 4 600 200 200
./philo 2 1000 200 400
./philo 5 600 150 150
./philo 4 410 200 200
./philo 100 800 200 200
./philo 105 800 200 200
./philo 200 800 200 200
```

### **Simulation Should Stop After Eating N Meals**
```
./philo 4 410 200 200 5
./philo 2 500 200 200 10
./philo 6 1000 400 400 2
./philo 3 800 200 200 2
./philo 5 800 200 200 7
./philo 4 410 200 200 10
```

### **Edge Cases**
#### **Single Philosopher (Should Die)**
```
./philo 1 800 200 200
```

#### **Philosophers Die Quickly (time_to_die < time_to_eat + time_to_sleep)**
```
./philo 5 200 200 200
./philo 5 200 100 100
./philo 6 100 70 50
./philo 4 310 200 100
./philo 4 200 205 200
```

#### **High Number of Philosophers**
```
./philo 200 800 200 200
```

#### **Error Cases**
```
./philo                # No input
./philo 5 200 100 100 5 42  # Too many arguments
./philo five 200 100 100  # Invalid input
./philo 4 200 100 100 2,  # Invalid input (comma)
./philo 5 -200 100 100  # Negative values
./philo 0 800 200 200  # Zero values
./philo 5 800 200 200 0  # 0 meals should be invalid
```

#### **Memory and Thread Testing**
```
valgrind ./philo 5 200 100 100  # Memory leak check
valgrind --leak-check=full --show-leak-kinds=all ./philo 1 300 300 300
valgrind --tool=helgrind ./philo 4 410 200 200 5  # Race condition check
valgrind --tool=helgrind ./philo 1 300 300 300
========================================================



## **Bonus Part Test Cases (`./philo_bonus`)**

### **Basic Cases (No Philosopher Should Die)**
```
./philo_bonus 5 800 200 200
./philo_bonus 7 800 200 350
./philo_bonus 4 600 200 200
./philo_bonus 2 1000 200 400
./philo_bonus 5 600 150 150
./philo_bonus 4 410 200 200
./philo_bonus 100 800 200 200
./philo_bonus 105 800 200 200
./philo_bonus 200 800 200 200
```

### **Simulation Should Stop After Eating N Meals**
```
./philo_bonus 4 410 200 200 5
./philo_bonus 2 500 200 200 10
./philo_bonus 6 1000 400 400 2
./philo_bonus 3 800 200 200 2
./philo_bonus 5 800 200 200 7
./philo_bonus 4 410 200 200 10
```

### **Edge Cases**
#### **Single Philosopher (Should Die)**
```
./philo_bonus 1 800 200 200
```

#### **Philosophers Die Quickly (time_to_die < time_to_eat + time_to_sleep)**
```
./philo_bonus 5 200 200 200
./philo_bonus 5 200 100 100
./philo_bonus 6 100 70 50
./philo_bonus 4 310 200 100
./philo_bonus 4 200 205 200
```

#### **Memory and Thread Testing**
```
valgrind ./philo_bonus 5 200 100 100  # Memory leak check
valgrind --trace-children=yes ./philo_bonus 4 410 200 200 5  # Race condition check
```
Yes, great observation — and you're absolutely right.

When you run your program under **Valgrind** or **Helgrind**, especially for a multi-threaded simulation like **Philosophers**, these tools can interfere with timing and synchronization. Here's **why that happens**:

---

### 🧠 **How Valgrind & Helgrind Work**
- **Valgrind** is a *dynamic binary instrumentation* framework. It intercepts **every memory operation**, system call, and thread-related instruction to track:
  - Memory leaks
  - Invalid accesses
  - Thread races (Helgrind)
- This means that **every single operation** in your code is being **wrapped, analyzed, and reported** by Valgrind.
- Helgrind (a Valgrind tool) adds **additional tracking** for mutexes, condition variables, and memory access patterns between threads.

---

### 🐢 **Why Threads Run Slower or Out of Sync**
1. **Timing overhead:**
   - What normally takes a few microseconds may now take milliseconds.
   - For example: `usleep(200)` may be delayed under Valgrind because it's not just sleeping — Valgrind is tracking everything happening before and after that sleep.

2. **Race timing is affected:**
   - Normally synchronized threads can now **appear out-of-sync** due to Valgrind's slowdown.
   - Deadlines like `time_to_die` might be missed even if they're met under normal execution.

3. **Syscall latency:**
   - Accessing `gettimeofday()` or using `pthread_mutex_lock()` might take much longer under Valgrind.

4. **Thread scheduling distortion:**
   - Valgrind has **no control over actual OS thread scheduling**, but the slowdown it causes leads to **non-deterministic execution** that can expose (or simulate) thread starvation or desynchronization that doesn't happen at native speed.

---

### 🛠️ **What You Can Do About It**
- When testing under Valgrind:
  - Use **longer values** for `time_to_die`, `time_to_eat`, and `time_to_sleep`.
  - Example: `./philo 5 2000 800 800` instead of `./philo 5 800 200 200`
- Helgrind is still **very useful** to catch race conditions — just don’t rely on it for *performance-sensitive behavior* like tight timing windows.

---

### ✅ TL;DR
> **Yes**, Valgrind/Helgrind slows down your program and affects thread timing. That’s expected, because they analyze every memory and thread operation. For timing-based simulations like *Philosophers*, this can lead to philosophers dying *under Valgrind* when they wouldn’t under normal execution.

Let me know if you want help setting up specific Valgrind test configurations or reading Helgrind output! 🧪🧵
---
📢📕📗📘📙→🚨🔍⚠💡🎮 🎉 🔰🏁🚩🛟🔶🔷🔴🟠🟢🟣🟡🔵⇶🙊 🍝🧠🐢 🛠️🔧💭💀
1️⃣2️⃣3️⃣4️⃣5️⃣6️⃣7️⃣8️⃣9️⃣🔟✅.🚫❗⭐ 😴😵🍴🤔 🗑📥🚀🔥🎯 ❌ 🔹🔸🔺🔻📌🧪🧵

