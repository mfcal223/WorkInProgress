🔰  Git useful commands  🔰
============================

Clone repo	
git clone <repo_name>

Check status
git status

Create a branch
git checkout -b <branch_name>

Push to remote
git push -u origin <branch_name>

Change branch 
git checkout <branch_name>

Commit changes	
git add <file_name>

git commit -m "Msg with changes"
Merge into main	

git checkout main
git merge <branch_name>

Delete branch after merging	
git push origin --delete <branch_name>

----------
Work_flow with branches for every day
1. Switch to branch:
git checkout <my_branch>

2. Fetch the latest changes from main:
git fetch origin

3. Rebase my branch onto the latest main:
git rebase origin/main

This reapplies the branch’s commits on top of the latest main. 

If no conflicts, follow usual add >> commit >> push

If there are conflicts, Git will pause and ask to resolve them.

4. Resolve conflicts (if needed):
Edit the files to fix conflicts.

5. Stage the resolved files:
git add <file>

6. Continue the rebase:
git rebase --continue

7. Push the rebased branch (if already pushed before):
git push --force origin my-feature


🔰 Team Git Workflow Guide 🔰
============================

📌 Scenario: You`re working on a feature or update in a personal branch (e.g., develop_Name) and need to push it to main.

CREATE OR DELETE YOUR PERSONAL BRANCH
--------------------------------------

Create your personal branch

	> git checkout -b develop_YourName   # If creating a new branch

Clean up/Delete your branch
If the feature is complete and no longer needed:
git branch -d develop_YourName                		# Delete local branch
git push origin --delete develop_YourName     		# Delete remote branch (if agreed by team)

🔁 Step-by-Step Git Workflow
-----------------------------

🔹 1. Swtich to your personal branch
	
> git checkout develop_YourName      # Switch to a branch that already exists

🔹 2. Make your changes locally
//Edit your files as needed.
Check status:
	> git status

🔹 3. Stage and commit your changes
	> git add .                           # Or specify files
	> git commit -m "Describe your update briefly"

🔹 4. Push your branch to GitHub
🚨 If it`s your first push of this branch:
	> git push -u origin develop_YourName

📥 For later pushes:
> git push


🔹 5. Merge your changes into main when ready
	a. Switch to main
		> git checkout main
	b. Pull the latest version of main
		> git pull origin main
	c. Merge your branch into main
		> git merge develop_YourName

🔹 6. Push the updated main branch to GitHub
	> git push origin main

✅ Now your changes are live on main and visible to everyone.


⚔️ How to Solve Merge Conflicts ⚔️
===================================
If you see something like this during merge:

"CONFLICT (content): Merge conflict in somefile.c
Automatic merge failed; fix conflicts and then commit the result."

🧹 Step-by-step:

1. Open the file and look for conflict markers:
     <<<<<<< HEAD
   code from main
   =======
   code from develop_YourName
   >>>>>>> develop_YourName

2. Manually edit and keep the correct version.

3. After editing:
> git add somefile.c

4. Then commit the merge:
> git commit

5. Finally, push the resolved version:
> git push origin main

/////////////////////
After update from own branch has been merge into main, and after pull request approved: 

from own branch: 
> git fetch origin
> git rebase origin/main
> git push


☕️ Morning Git Ritual: Pull the Latest
===================================
Before you do anything else, it’s a great habit to:

git checkout main
git pull origin main

Why?
To make sure you’re working on top of the latest team code.
Avoid future merge conflicts by starting with an up-to-date base.

✅ Then: Start Your New Task
After pulling main, you can update your existing branch with the latest main:
git checkout develop_Flor
git rebase main

(Rebase is great to keep history clean. I can help with that if you’d like!)

💡 Tips for Team Collaboration
==============================
⭐ Always pull the latest main before starting a new feature.
⭐ Use clear and descriptive commit messages.
⭐ Coordinate with the team before merging large updates.
⭐ If conflicts happen during merge, check the following section.