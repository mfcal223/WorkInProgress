MINISHELL

Handle user input
[ ] Read user input using readline( ) or getnextline( ).
[ ] Handle command history with add_history( ).
[ ]Trim spaces and handle empty input. 

Parsing
[ ] Split the input into tokens (arguments, operators, quotes, etc).
[ ] Handle quotes ( ‘ and “ ) properly, preventing unwanted splitting. 
[ ] Handle environments variable expansion ($VAR).
[ ] Detect and classify operators ( | , < , > , >> ).
 
Execute simple commands
[ ] Search for executables in $PATH (using getenv(“PATH”) and access( ) ).
[ ] Use fork( ) and execve( ) to execute external commands. 
	
	Basic Commands (Available in /bin/)
ls – List files and directories.
cat – Print file contents.
grep – Search for text in a file.
head – Show first few lines of a file.
tail – Show last few lines of a file.
wc – Count words, lines, and bytes in a file.
cp – Copy files.
mv – Move or rename files.
rm – Remove files.
mkdir – Create a new directory.
rmdir – Remove empty directories.

File Manipulation
touch – Create an empty file.
chmod – Change file permissions.
chown – Change file ownership.

System Utilities
whoami – Display the current user.
uname – Show system information.
hostname – Show the system hostname.
clear – Clear the terminal screen.

Networking Commands
ping – Check network connectivity.
curl – Fetch data from a URL.
wget – Download files from the web.

Compilation & Execution
gcc – Compile C programs.
make – Run Makefile commands.
./a.out – Execute a compiled program.


Wait for child processes with waitpid( ). 
Handle exit statuses properly ($?).




Handle redirections ( < , > , >> )
redirect input ( < ) = read from a file instead of stdin
 redirect output ( > ) = write to a file (overwrite)
append output ( >> ) = write to a file (append mode)


Implement pipes
Connect commands with pipes ( | ) using pipe( ).
Manage multiple pipes correctly ( ls | grep .c | wc -l ).
Close unused pipe ends in child processes.

Implement built-in commands
[❗] echo (handle -n flag)*(A) // falta actualizar argumentos
[ ] cd (handle relative and absolute paths)*(A)
[✅]pwd (print current directory)*(A)
[ ] export (modify environment variables)*(A)
[ ] unset (remove environment variables)*(A)
[✅] env (print all environment variables)
[ ] exit (terminate the shell)
 
Handle signals
[✅] Handle ctrl+C (SIGINT) = interrupts current process but doesn’t exit shell
[✅] Handle ctrl+D (EOF) = exits shell cleanly
[✅] Handle ctrl+\ (SIGQUIT) = should be ignored
❗ PENDING: handle with heredoc> / with forks/child processes

Improve error handling
Handle invalid commands (command not found).
Detect syntax errors ( | at the beginning, > without filename, etc).
Properly free memory to avoid leaks.
Properly close file descriptors.


Testing and debugging (****FALTA DESARROLLAR****)
Test individual features.
Test edge cases (quotes, empty input, special character, etc).
Use valgrind to check memory leaks.

